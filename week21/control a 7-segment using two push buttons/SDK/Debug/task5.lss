
task5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001ba  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000438  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000074b  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define PIND *((volatile u8*)0x30)
#define DDRD *((volatile u8*)0x31)
#define PORTD *((volatile u8*)0x32)

int main (void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	60 97       	sbiw	r28, 0x10	; 16
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	u8 segment[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
  96:	ce 01       	movw	r24, r28
  98:	02 96       	adiw	r24, 0x02	; 2
  9a:	9d 87       	std	Y+13, r25	; 0x0d
  9c:	8c 87       	std	Y+12, r24	; 0x0c
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	ff 87       	std	Y+15, r31	; 0x0f
  a4:	ee 87       	std	Y+14, r30	; 0x0e
  a6:	fa e0       	ldi	r31, 0x0A	; 10
  a8:	f8 8b       	std	Y+16, r31	; 0x10
  aa:	ee 85       	ldd	r30, Y+14	; 0x0e
  ac:	ff 85       	ldd	r31, Y+15	; 0x0f
  ae:	00 80       	ld	r0, Z
  b0:	8e 85       	ldd	r24, Y+14	; 0x0e
  b2:	9f 85       	ldd	r25, Y+15	; 0x0f
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	9f 87       	std	Y+15, r25	; 0x0f
  b8:	8e 87       	std	Y+14, r24	; 0x0e
  ba:	ec 85       	ldd	r30, Y+12	; 0x0c
  bc:	fd 85       	ldd	r31, Y+13	; 0x0d
  be:	00 82       	st	Z, r0
  c0:	8c 85       	ldd	r24, Y+12	; 0x0c
  c2:	9d 85       	ldd	r25, Y+13	; 0x0d
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	9d 87       	std	Y+13, r25	; 0x0d
  c8:	8c 87       	std	Y+12, r24	; 0x0c
  ca:	98 89       	ldd	r25, Y+16	; 0x10
  cc:	91 50       	subi	r25, 0x01	; 1
  ce:	98 8b       	std	Y+16, r25	; 0x10
  d0:	e8 89       	ldd	r30, Y+16	; 0x10
  d2:	ee 23       	and	r30, r30
  d4:	51 f7       	brne	.-44     	; 0xaa <main+0x28>

	CLEAR_BIT(DDRA,0);
  d6:	aa e3       	ldi	r26, 0x3A	; 58
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	ea e3       	ldi	r30, 0x3A	; 58
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	8c 93       	st	X, r24
	CLEAR_BIT(DDRA,1);
  e4:	aa e3       	ldi	r26, 0x3A	; 58
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ea e3       	ldi	r30, 0x3A	; 58
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	8d 7f       	andi	r24, 0xFD	; 253
  f0:	8c 93       	st	X, r24

	SET_BIT(PORTA,0);
  f2:	ab e3       	ldi	r26, 0x3B	; 59
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	eb e3       	ldi	r30, 0x3B	; 59
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	8c 93       	st	X, r24
	SET_BIT(PORTA,1);
 100:	ab e3       	ldi	r26, 0x3B	; 59
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	eb e3       	ldi	r30, 0x3B	; 59
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	8c 93       	st	X, r24

	DDRC=255;
 10e:	e4 e3       	ldi	r30, 0x34	; 52
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	80 83       	st	Z, r24

	PORTC=segment[0];
 116:	e5 e3       	ldi	r30, 0x35	; 53
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	8a 81       	ldd	r24, Y+2	; 0x02
 11c:	80 83       	st	Z, r24

	u8 counter=0;
 11e:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		if(READ_BIT(PINA,0)==0)
 120:	e9 e3       	ldi	r30, 0x39	; 57
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	81 70       	andi	r24, 0x01	; 1
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	d9 f4       	brne	.+54     	; 0x168 <main+0xe6>
		{
			if(counter<9)counter++;
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	89 30       	cpi	r24, 0x09	; 9
 136:	18 f4       	brcc	.+6      	; 0x13e <main+0xbc>
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	89 83       	std	Y+1, r24	; 0x01
			while(READ_BIT(PINA,0)==0);
 13e:	e9 e3       	ldi	r30, 0x39	; 57
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 2f       	mov	r24, r24
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	81 70       	andi	r24, 0x01	; 1
 14a:	90 70       	andi	r25, 0x00	; 0
 14c:	00 97       	sbiw	r24, 0x00	; 0
 14e:	b9 f3       	breq	.-18     	; 0x13e <main+0xbc>
			PORTC=segment[counter];
 150:	a5 e3       	ldi	r26, 0x35	; 53
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	28 2f       	mov	r18, r24
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	ce 01       	movw	r24, r28
 15c:	02 96       	adiw	r24, 0x02	; 2
 15e:	fc 01       	movw	r30, r24
 160:	e2 0f       	add	r30, r18
 162:	f3 1f       	adc	r31, r19
 164:	80 81       	ld	r24, Z
 166:	8c 93       	st	X, r24
		}

		if(READ_BIT(PINA,1)==0)
 168:	e9 e3       	ldi	r30, 0x39	; 57
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	86 95       	lsr	r24
 170:	88 2f       	mov	r24, r24
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	81 70       	andi	r24, 0x01	; 1
 176:	90 70       	andi	r25, 0x00	; 0
 178:	00 97       	sbiw	r24, 0x00	; 0
 17a:	91 f6       	brne	.-92     	; 0x120 <main+0x9e>
		{
			if(counter!=0)counter--;
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	88 23       	and	r24, r24
 180:	19 f0       	breq	.+6      	; 0x188 <main+0x106>
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	81 50       	subi	r24, 0x01	; 1
 186:	89 83       	std	Y+1, r24	; 0x01
			while(READ_BIT(PINA,1)==0);
 188:	e9 e3       	ldi	r30, 0x39	; 57
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	86 95       	lsr	r24
 190:	88 2f       	mov	r24, r24
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	81 70       	andi	r24, 0x01	; 1
 196:	90 70       	andi	r25, 0x00	; 0
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	b1 f3       	breq	.-20     	; 0x188 <main+0x106>
			PORTC=segment[counter];
 19c:	a5 e3       	ldi	r26, 0x35	; 53
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	28 2f       	mov	r18, r24
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	ce 01       	movw	r24, r28
 1a8:	02 96       	adiw	r24, 0x02	; 2
 1aa:	fc 01       	movw	r30, r24
 1ac:	e2 0f       	add	r30, r18
 1ae:	f3 1f       	adc	r31, r19
 1b0:	80 81       	ld	r24, Z
 1b2:	8c 93       	st	X, r24
 1b4:	b5 cf       	rjmp	.-150    	; 0x120 <main+0x9e>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
