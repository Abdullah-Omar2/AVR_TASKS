
SWITCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f02  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000f02  00000f76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000012c0  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007c8  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 43 07 	call	0xe86	; 0xe86 <main>
  7a:	0c 94 7f 07 	jmp	0xefe	; 0xefe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enumPortInit>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	19 82       	std	Y+1, r1	; 0x01
  8e:	ea e3       	ldi	r30, 0x3A	; 58
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	80 83       	st	Z, r24
  96:	e7 e3       	ldi	r30, 0x37	; 55
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	80 83       	st	Z, r24
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	80 83       	st	Z, r24
  a6:	e1 e3       	ldi	r30, 0x31	; 49
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	80 83       	st	Z, r24
  ae:	eb e3       	ldi	r30, 0x3B	; 59
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	e8 e3       	ldi	r30, 0x38	; 56
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1
  ba:	e5 e3       	ldi	r30, 0x35	; 53
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	10 82       	st	Z, r1
  c0:	e2 e3       	ldi	r30, 0x32	; 50
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	0f 90       	pop	r0
  ce:	cf 91       	pop	r28
  d0:	df 91       	pop	r29
  d2:	08 95       	ret

000000d4 <DIO_enumSetPortDirection>:

	return Local_enumErrorState;
}

ES_T DIO_enumSetPortDirection (u8 Copy_u8PortID,u8 Copy_u8Direction)
{
  d4:	df 93       	push	r29
  d6:	cf 93       	push	r28
  d8:	00 d0       	rcall	.+0      	; 0xda <DIO_enumSetPortDirection+0x6>
  da:	00 d0       	rcall	.+0      	; 0xdc <DIO_enumSetPortDirection+0x8>
  dc:	0f 92       	push	r0
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	8a 83       	std	Y+2, r24	; 0x02
  e4:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enumErrorState=ES_NOK;
  e6:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD)
  e8:	8a 81       	ldd	r24, Y+2	; 0x02
  ea:	84 30       	cpi	r24, 0x04	; 4
  ec:	a8 f5       	brcc	.+106    	; 0x158 <DIO_enumSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
  ee:	8a 81       	ldd	r24, Y+2	; 0x02
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	3d 83       	std	Y+5, r19	; 0x05
  f6:	2c 83       	std	Y+4, r18	; 0x04
  f8:	8c 81       	ldd	r24, Y+4	; 0x04
  fa:	9d 81       	ldd	r25, Y+5	; 0x05
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	91 05       	cpc	r25, r1
 100:	d1 f0       	breq	.+52     	; 0x136 <DIO_enumSetPortDirection+0x62>
 102:	2c 81       	ldd	r18, Y+4	; 0x04
 104:	3d 81       	ldd	r19, Y+5	; 0x05
 106:	22 30       	cpi	r18, 0x02	; 2
 108:	31 05       	cpc	r19, r1
 10a:	2c f4       	brge	.+10     	; 0x116 <DIO_enumSetPortDirection+0x42>
 10c:	8c 81       	ldd	r24, Y+4	; 0x04
 10e:	9d 81       	ldd	r25, Y+5	; 0x05
 110:	00 97       	sbiw	r24, 0x00	; 0
 112:	61 f0       	breq	.+24     	; 0x12c <DIO_enumSetPortDirection+0x58>
 114:	1e c0       	rjmp	.+60     	; 0x152 <DIO_enumSetPortDirection+0x7e>
 116:	2c 81       	ldd	r18, Y+4	; 0x04
 118:	3d 81       	ldd	r19, Y+5	; 0x05
 11a:	22 30       	cpi	r18, 0x02	; 2
 11c:	31 05       	cpc	r19, r1
 11e:	81 f0       	breq	.+32     	; 0x140 <DIO_enumSetPortDirection+0x6c>
 120:	8c 81       	ldd	r24, Y+4	; 0x04
 122:	9d 81       	ldd	r25, Y+5	; 0x05
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	91 05       	cpc	r25, r1
 128:	81 f0       	breq	.+32     	; 0x14a <DIO_enumSetPortDirection+0x76>
 12a:	13 c0       	rjmp	.+38     	; 0x152 <DIO_enumSetPortDirection+0x7e>
		{
			case DIO_PORTA:
				DDRA=Copy_u8Direction;
 12c:	ea e3       	ldi	r30, 0x3A	; 58
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	8b 81       	ldd	r24, Y+3	; 0x03
 132:	80 83       	st	Z, r24
 134:	0e c0       	rjmp	.+28     	; 0x152 <DIO_enumSetPortDirection+0x7e>
				break;
			case DIO_PORTB:
				DDRB=Copy_u8Direction;
 136:	e7 e3       	ldi	r30, 0x37	; 55
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	8b 81       	ldd	r24, Y+3	; 0x03
 13c:	80 83       	st	Z, r24
 13e:	09 c0       	rjmp	.+18     	; 0x152 <DIO_enumSetPortDirection+0x7e>
				break;
			case DIO_PORTC:
				DDRC=Copy_u8Direction;
 140:	e4 e3       	ldi	r30, 0x34	; 52
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	8b 81       	ldd	r24, Y+3	; 0x03
 146:	80 83       	st	Z, r24
 148:	04 c0       	rjmp	.+8      	; 0x152 <DIO_enumSetPortDirection+0x7e>
				break;
			case DIO_PORTD:
				DDRD=Copy_u8Direction;
 14a:	e1 e3       	ldi	r30, 0x31	; 49
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	8b 81       	ldd	r24, Y+3	; 0x03
 150:	80 83       	st	Z, r24
				break;
		}
		Local_enumErrorState=ES_OK;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	89 83       	std	Y+1, r24	; 0x01
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_enumSetPortDirection+0x88>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
 15c:	89 81       	ldd	r24, Y+1	; 0x01
}
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	cf 91       	pop	r28
 16a:	df 91       	pop	r29
 16c:	08 95       	ret

0000016e <DIO_enumSetPortValue>:
ES_T DIO_enumSetPortValue (u8 Copy_u8PortID,u8 Copy_u8Value)
{
 16e:	df 93       	push	r29
 170:	cf 93       	push	r28
 172:	00 d0       	rcall	.+0      	; 0x174 <DIO_enumSetPortValue+0x6>
 174:	00 d0       	rcall	.+0      	; 0x176 <DIO_enumSetPortValue+0x8>
 176:	0f 92       	push	r0
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	8a 83       	std	Y+2, r24	; 0x02
 17e:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enumErrorState=ES_NOK;
 180:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD)
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	84 30       	cpi	r24, 0x04	; 4
 186:	a8 f5       	brcc	.+106    	; 0x1f2 <DIO_enumSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	3d 83       	std	Y+5, r19	; 0x05
 190:	2c 83       	std	Y+4, r18	; 0x04
 192:	8c 81       	ldd	r24, Y+4	; 0x04
 194:	9d 81       	ldd	r25, Y+5	; 0x05
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	91 05       	cpc	r25, r1
 19a:	d1 f0       	breq	.+52     	; 0x1d0 <DIO_enumSetPortValue+0x62>
 19c:	2c 81       	ldd	r18, Y+4	; 0x04
 19e:	3d 81       	ldd	r19, Y+5	; 0x05
 1a0:	22 30       	cpi	r18, 0x02	; 2
 1a2:	31 05       	cpc	r19, r1
 1a4:	2c f4       	brge	.+10     	; 0x1b0 <DIO_enumSetPortValue+0x42>
 1a6:	8c 81       	ldd	r24, Y+4	; 0x04
 1a8:	9d 81       	ldd	r25, Y+5	; 0x05
 1aa:	00 97       	sbiw	r24, 0x00	; 0
 1ac:	61 f0       	breq	.+24     	; 0x1c6 <DIO_enumSetPortValue+0x58>
 1ae:	1e c0       	rjmp	.+60     	; 0x1ec <DIO_enumSetPortValue+0x7e>
 1b0:	2c 81       	ldd	r18, Y+4	; 0x04
 1b2:	3d 81       	ldd	r19, Y+5	; 0x05
 1b4:	22 30       	cpi	r18, 0x02	; 2
 1b6:	31 05       	cpc	r19, r1
 1b8:	81 f0       	breq	.+32     	; 0x1da <DIO_enumSetPortValue+0x6c>
 1ba:	8c 81       	ldd	r24, Y+4	; 0x04
 1bc:	9d 81       	ldd	r25, Y+5	; 0x05
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	91 05       	cpc	r25, r1
 1c2:	81 f0       	breq	.+32     	; 0x1e4 <DIO_enumSetPortValue+0x76>
 1c4:	13 c0       	rjmp	.+38     	; 0x1ec <DIO_enumSetPortValue+0x7e>
		{
			case DIO_PORTA:
				PORTA=Copy_u8Value;
 1c6:	eb e3       	ldi	r30, 0x3B	; 59
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	8b 81       	ldd	r24, Y+3	; 0x03
 1cc:	80 83       	st	Z, r24
 1ce:	0e c0       	rjmp	.+28     	; 0x1ec <DIO_enumSetPortValue+0x7e>
				break;
			case DIO_PORTB:
				PORTB=Copy_u8Value;
 1d0:	e8 e3       	ldi	r30, 0x38	; 56
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	8b 81       	ldd	r24, Y+3	; 0x03
 1d6:	80 83       	st	Z, r24
 1d8:	09 c0       	rjmp	.+18     	; 0x1ec <DIO_enumSetPortValue+0x7e>
				break;
			case DIO_PORTC:
				PORTC=Copy_u8Value;
 1da:	e5 e3       	ldi	r30, 0x35	; 53
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	80 83       	st	Z, r24
 1e2:	04 c0       	rjmp	.+8      	; 0x1ec <DIO_enumSetPortValue+0x7e>
				break;
			case DIO_PORTD:
				PORTD=Copy_u8Value;
 1e4:	e2 e3       	ldi	r30, 0x32	; 50
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	80 83       	st	Z, r24
				break;
		}
		Local_enumErrorState=ES_OK;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	89 83       	std	Y+1, r24	; 0x01
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_enumSetPortValue+0x88>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
}
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	cf 91       	pop	r28
 204:	df 91       	pop	r29
 206:	08 95       	ret

00000208 <DIO_enumTogglePortDirection>:
ES_T DIO_enumTogglePortDirection (u8 Copy_u8PortID)
{
 208:	df 93       	push	r29
 20a:	cf 93       	push	r28
 20c:	00 d0       	rcall	.+0      	; 0x20e <DIO_enumTogglePortDirection+0x6>
 20e:	00 d0       	rcall	.+0      	; 0x210 <DIO_enumTogglePortDirection+0x8>
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
 214:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enumErrorState=ES_NOK;
 216:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD)
 218:	8a 81       	ldd	r24, Y+2	; 0x02
 21a:	84 30       	cpi	r24, 0x04	; 4
 21c:	08 f0       	brcs	.+2      	; 0x220 <DIO_enumTogglePortDirection+0x18>
 21e:	41 c0       	rjmp	.+130    	; 0x2a2 <DIO_enumTogglePortDirection+0x9a>
	{
		switch(Copy_u8PortID)
 220:	8a 81       	ldd	r24, Y+2	; 0x02
 222:	28 2f       	mov	r18, r24
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	3c 83       	std	Y+4, r19	; 0x04
 228:	2b 83       	std	Y+3, r18	; 0x03
 22a:	8b 81       	ldd	r24, Y+3	; 0x03
 22c:	9c 81       	ldd	r25, Y+4	; 0x04
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	91 05       	cpc	r25, r1
 232:	e9 f0       	breq	.+58     	; 0x26e <DIO_enumTogglePortDirection+0x66>
 234:	2b 81       	ldd	r18, Y+3	; 0x03
 236:	3c 81       	ldd	r19, Y+4	; 0x04
 238:	22 30       	cpi	r18, 0x02	; 2
 23a:	31 05       	cpc	r19, r1
 23c:	2c f4       	brge	.+10     	; 0x248 <DIO_enumTogglePortDirection+0x40>
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	9c 81       	ldd	r25, Y+4	; 0x04
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	61 f0       	breq	.+24     	; 0x25e <DIO_enumTogglePortDirection+0x56>
 246:	2a c0       	rjmp	.+84     	; 0x29c <DIO_enumTogglePortDirection+0x94>
 248:	2b 81       	ldd	r18, Y+3	; 0x03
 24a:	3c 81       	ldd	r19, Y+4	; 0x04
 24c:	22 30       	cpi	r18, 0x02	; 2
 24e:	31 05       	cpc	r19, r1
 250:	b1 f0       	breq	.+44     	; 0x27e <DIO_enumTogglePortDirection+0x76>
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	9c 81       	ldd	r25, Y+4	; 0x04
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	91 05       	cpc	r25, r1
 25a:	c9 f0       	breq	.+50     	; 0x28e <DIO_enumTogglePortDirection+0x86>
 25c:	1f c0       	rjmp	.+62     	; 0x29c <DIO_enumTogglePortDirection+0x94>
		{
			case DIO_PORTA:
				DDRA=~DDRA;
 25e:	aa e3       	ldi	r26, 0x3A	; 58
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	ea e3       	ldi	r30, 0x3A	; 58
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 95       	com	r24
 26a:	8c 93       	st	X, r24
 26c:	17 c0       	rjmp	.+46     	; 0x29c <DIO_enumTogglePortDirection+0x94>
				break;
			case DIO_PORTB:
				DDRB=~DDRB;
 26e:	a7 e3       	ldi	r26, 0x37	; 55
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	e7 e3       	ldi	r30, 0x37	; 55
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	80 95       	com	r24
 27a:	8c 93       	st	X, r24
 27c:	0f c0       	rjmp	.+30     	; 0x29c <DIO_enumTogglePortDirection+0x94>
				break;
			case DIO_PORTC:
				DDRC=~DDRC;
 27e:	a4 e3       	ldi	r26, 0x34	; 52
 280:	b0 e0       	ldi	r27, 0x00	; 0
 282:	e4 e3       	ldi	r30, 0x34	; 52
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	80 95       	com	r24
 28a:	8c 93       	st	X, r24
 28c:	07 c0       	rjmp	.+14     	; 0x29c <DIO_enumTogglePortDirection+0x94>
				break;
			case DIO_PORTD:
				DDRD=~DDRD;
 28e:	a1 e3       	ldi	r26, 0x31	; 49
 290:	b0 e0       	ldi	r27, 0x00	; 0
 292:	e1 e3       	ldi	r30, 0x31	; 49
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	80 95       	com	r24
 29a:	8c 93       	st	X, r24
				break;
		}
		Local_enumErrorState=ES_OK;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	89 83       	std	Y+1, r24	; 0x01
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_enumTogglePortDirection+0x9e>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
}
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	cf 91       	pop	r28
 2b2:	df 91       	pop	r29
 2b4:	08 95       	ret

000002b6 <DIO_enumTogglePortValue>:
ES_T DIO_enumTogglePortValue (u8 Copy_u8PortID)
{
 2b6:	df 93       	push	r29
 2b8:	cf 93       	push	r28
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <DIO_enumTogglePortValue+0x6>
 2bc:	00 d0       	rcall	.+0      	; 0x2be <DIO_enumTogglePortValue+0x8>
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enumErrorState=ES_NOK;
 2c4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD)
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	84 30       	cpi	r24, 0x04	; 4
 2ca:	08 f0       	brcs	.+2      	; 0x2ce <DIO_enumTogglePortValue+0x18>
 2cc:	41 c0       	rjmp	.+130    	; 0x350 <DIO_enumTogglePortValue+0x9a>
	{
		switch(Copy_u8PortID)
 2ce:	8a 81       	ldd	r24, Y+2	; 0x02
 2d0:	28 2f       	mov	r18, r24
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	3c 83       	std	Y+4, r19	; 0x04
 2d6:	2b 83       	std	Y+3, r18	; 0x03
 2d8:	8b 81       	ldd	r24, Y+3	; 0x03
 2da:	9c 81       	ldd	r25, Y+4	; 0x04
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	91 05       	cpc	r25, r1
 2e0:	e9 f0       	breq	.+58     	; 0x31c <DIO_enumTogglePortValue+0x66>
 2e2:	2b 81       	ldd	r18, Y+3	; 0x03
 2e4:	3c 81       	ldd	r19, Y+4	; 0x04
 2e6:	22 30       	cpi	r18, 0x02	; 2
 2e8:	31 05       	cpc	r19, r1
 2ea:	2c f4       	brge	.+10     	; 0x2f6 <DIO_enumTogglePortValue+0x40>
 2ec:	8b 81       	ldd	r24, Y+3	; 0x03
 2ee:	9c 81       	ldd	r25, Y+4	; 0x04
 2f0:	00 97       	sbiw	r24, 0x00	; 0
 2f2:	61 f0       	breq	.+24     	; 0x30c <DIO_enumTogglePortValue+0x56>
 2f4:	2a c0       	rjmp	.+84     	; 0x34a <DIO_enumTogglePortValue+0x94>
 2f6:	2b 81       	ldd	r18, Y+3	; 0x03
 2f8:	3c 81       	ldd	r19, Y+4	; 0x04
 2fa:	22 30       	cpi	r18, 0x02	; 2
 2fc:	31 05       	cpc	r19, r1
 2fe:	b1 f0       	breq	.+44     	; 0x32c <DIO_enumTogglePortValue+0x76>
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	9c 81       	ldd	r25, Y+4	; 0x04
 304:	83 30       	cpi	r24, 0x03	; 3
 306:	91 05       	cpc	r25, r1
 308:	c9 f0       	breq	.+50     	; 0x33c <DIO_enumTogglePortValue+0x86>
 30a:	1f c0       	rjmp	.+62     	; 0x34a <DIO_enumTogglePortValue+0x94>
		{
			case DIO_PORTA:
				PORTA=~PORTA;
 30c:	ab e3       	ldi	r26, 0x3B	; 59
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	eb e3       	ldi	r30, 0x3B	; 59
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	80 95       	com	r24
 318:	8c 93       	st	X, r24
 31a:	17 c0       	rjmp	.+46     	; 0x34a <DIO_enumTogglePortValue+0x94>
				break;
			case DIO_PORTB:
				PORTB=~PORTB;
 31c:	a8 e3       	ldi	r26, 0x38	; 56
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	e8 e3       	ldi	r30, 0x38	; 56
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	80 95       	com	r24
 328:	8c 93       	st	X, r24
 32a:	0f c0       	rjmp	.+30     	; 0x34a <DIO_enumTogglePortValue+0x94>
				break;
			case DIO_PORTC:
				PORTC=~PORTC;
 32c:	a5 e3       	ldi	r26, 0x35	; 53
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	e5 e3       	ldi	r30, 0x35	; 53
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	80 95       	com	r24
 338:	8c 93       	st	X, r24
 33a:	07 c0       	rjmp	.+14     	; 0x34a <DIO_enumTogglePortValue+0x94>
				break;
			case DIO_PORTD:
				PORTD=~PORTD;
 33c:	a2 e3       	ldi	r26, 0x32	; 50
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	e2 e3       	ldi	r30, 0x32	; 50
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	80 95       	com	r24
 348:	8c 93       	st	X, r24
				break;
		}
		Local_enumErrorState=ES_OK;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	89 83       	std	Y+1, r24	; 0x01
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_enumTogglePortValue+0x9e>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
 354:	89 81       	ldd	r24, Y+1	; 0x01
}
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	cf 91       	pop	r28
 360:	df 91       	pop	r29
 362:	08 95       	ret

00000364 <DIO_enumGetPortDirection>:
ES_T DIO_enumGetPortDirection (u8 Copy_u8PortID,u8 *Copy_pu8Direction)
{
 364:	df 93       	push	r29
 366:	cf 93       	push	r28
 368:	00 d0       	rcall	.+0      	; 0x36a <DIO_enumGetPortDirection+0x6>
 36a:	00 d0       	rcall	.+0      	; 0x36c <DIO_enumGetPortDirection+0x8>
 36c:	00 d0       	rcall	.+0      	; 0x36e <DIO_enumGetPortDirection+0xa>
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
 372:	8a 83       	std	Y+2, r24	; 0x02
 374:	7c 83       	std	Y+4, r23	; 0x04
 376:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enumErrorState=ES_NOK;
 378:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD)
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	84 30       	cpi	r24, 0x04	; 4
 37e:	08 f0       	brcs	.+2      	; 0x382 <DIO_enumGetPortDirection+0x1e>
 380:	44 c0       	rjmp	.+136    	; 0x40a <DIO_enumGetPortDirection+0xa6>
	{
		if (Copy_pu8Direction!=NULL)
 382:	8b 81       	ldd	r24, Y+3	; 0x03
 384:	9c 81       	ldd	r25, Y+4	; 0x04
 386:	00 97       	sbiw	r24, 0x00	; 0
 388:	e9 f1       	breq	.+122    	; 0x404 <DIO_enumGetPortDirection+0xa0>
		{
			switch(Copy_u8PortID)
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	28 2f       	mov	r18, r24
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	3e 83       	std	Y+6, r19	; 0x06
 392:	2d 83       	std	Y+5, r18	; 0x05
 394:	8d 81       	ldd	r24, Y+5	; 0x05
 396:	9e 81       	ldd	r25, Y+6	; 0x06
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	91 05       	cpc	r25, r1
 39c:	e1 f0       	breq	.+56     	; 0x3d6 <DIO_enumGetPortDirection+0x72>
 39e:	2d 81       	ldd	r18, Y+5	; 0x05
 3a0:	3e 81       	ldd	r19, Y+6	; 0x06
 3a2:	22 30       	cpi	r18, 0x02	; 2
 3a4:	31 05       	cpc	r19, r1
 3a6:	2c f4       	brge	.+10     	; 0x3b2 <DIO_enumGetPortDirection+0x4e>
 3a8:	8d 81       	ldd	r24, Y+5	; 0x05
 3aa:	9e 81       	ldd	r25, Y+6	; 0x06
 3ac:	00 97       	sbiw	r24, 0x00	; 0
 3ae:	61 f0       	breq	.+24     	; 0x3c8 <DIO_enumGetPortDirection+0x64>
 3b0:	26 c0       	rjmp	.+76     	; 0x3fe <DIO_enumGetPortDirection+0x9a>
 3b2:	2d 81       	ldd	r18, Y+5	; 0x05
 3b4:	3e 81       	ldd	r19, Y+6	; 0x06
 3b6:	22 30       	cpi	r18, 0x02	; 2
 3b8:	31 05       	cpc	r19, r1
 3ba:	a1 f0       	breq	.+40     	; 0x3e4 <DIO_enumGetPortDirection+0x80>
 3bc:	8d 81       	ldd	r24, Y+5	; 0x05
 3be:	9e 81       	ldd	r25, Y+6	; 0x06
 3c0:	83 30       	cpi	r24, 0x03	; 3
 3c2:	91 05       	cpc	r25, r1
 3c4:	b1 f0       	breq	.+44     	; 0x3f2 <DIO_enumGetPortDirection+0x8e>
 3c6:	1b c0       	rjmp	.+54     	; 0x3fe <DIO_enumGetPortDirection+0x9a>
			{
				case DIO_PORTA:
					*Copy_pu8Direction=DDRA;
 3c8:	ea e3       	ldi	r30, 0x3A	; 58
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	eb 81       	ldd	r30, Y+3	; 0x03
 3d0:	fc 81       	ldd	r31, Y+4	; 0x04
 3d2:	80 83       	st	Z, r24
 3d4:	14 c0       	rjmp	.+40     	; 0x3fe <DIO_enumGetPortDirection+0x9a>
					break;
				case DIO_PORTB:
					*Copy_pu8Direction=DDRB;
 3d6:	e7 e3       	ldi	r30, 0x37	; 55
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	eb 81       	ldd	r30, Y+3	; 0x03
 3de:	fc 81       	ldd	r31, Y+4	; 0x04
 3e0:	80 83       	st	Z, r24
 3e2:	0d c0       	rjmp	.+26     	; 0x3fe <DIO_enumGetPortDirection+0x9a>
					break;
				case DIO_PORTC:
					*Copy_pu8Direction=DDRC;
 3e4:	e4 e3       	ldi	r30, 0x34	; 52
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	eb 81       	ldd	r30, Y+3	; 0x03
 3ec:	fc 81       	ldd	r31, Y+4	; 0x04
 3ee:	80 83       	st	Z, r24
 3f0:	06 c0       	rjmp	.+12     	; 0x3fe <DIO_enumGetPortDirection+0x9a>
					break;
				case DIO_PORTD:
					*Copy_pu8Direction=DDRD;
 3f2:	e1 e3       	ldi	r30, 0x31	; 49
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	eb 81       	ldd	r30, Y+3	; 0x03
 3fa:	fc 81       	ldd	r31, Y+4	; 0x04
 3fc:	80 83       	st	Z, r24
					break;
			}
			Local_enumErrorState=ES_OK;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	89 83       	std	Y+1, r24	; 0x01
 402:	05 c0       	rjmp	.+10     	; 0x40e <DIO_enumGetPortDirection+0xaa>
		}
		else
		{
			Local_enumErrorState=ES_NULL_POINTER;
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	89 83       	std	Y+1, r24	; 0x01
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_enumGetPortDirection+0xaa>
		}

	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
 40a:	83 e0       	ldi	r24, 0x03	; 3
 40c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
 40e:	89 81       	ldd	r24, Y+1	; 0x01
}
 410:	26 96       	adiw	r28, 0x06	; 6
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	f8 94       	cli
 416:	de bf       	out	0x3e, r29	; 62
 418:	0f be       	out	0x3f, r0	; 63
 41a:	cd bf       	out	0x3d, r28	; 61
 41c:	cf 91       	pop	r28
 41e:	df 91       	pop	r29
 420:	08 95       	ret

00000422 <DIO_enumGetPortValue>:
ES_T DIO_enumGetPortValue (u8 Copy_u8PortID,u8 *Copy_pu8Value)
{
 422:	df 93       	push	r29
 424:	cf 93       	push	r28
 426:	00 d0       	rcall	.+0      	; 0x428 <DIO_enumGetPortValue+0x6>
 428:	00 d0       	rcall	.+0      	; 0x42a <DIO_enumGetPortValue+0x8>
 42a:	00 d0       	rcall	.+0      	; 0x42c <DIO_enumGetPortValue+0xa>
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	8a 83       	std	Y+2, r24	; 0x02
 432:	7c 83       	std	Y+4, r23	; 0x04
 434:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enumErrorState=ES_NOK;
 436:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD)
 438:	8a 81       	ldd	r24, Y+2	; 0x02
 43a:	84 30       	cpi	r24, 0x04	; 4
 43c:	08 f0       	brcs	.+2      	; 0x440 <DIO_enumGetPortValue+0x1e>
 43e:	44 c0       	rjmp	.+136    	; 0x4c8 <DIO_enumGetPortValue+0xa6>
	{
		if (Copy_pu8Value!=NULL)
 440:	8b 81       	ldd	r24, Y+3	; 0x03
 442:	9c 81       	ldd	r25, Y+4	; 0x04
 444:	00 97       	sbiw	r24, 0x00	; 0
 446:	e9 f1       	breq	.+122    	; 0x4c2 <DIO_enumGetPortValue+0xa0>
		{
			switch(Copy_u8PortID)
 448:	8a 81       	ldd	r24, Y+2	; 0x02
 44a:	28 2f       	mov	r18, r24
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	3e 83       	std	Y+6, r19	; 0x06
 450:	2d 83       	std	Y+5, r18	; 0x05
 452:	8d 81       	ldd	r24, Y+5	; 0x05
 454:	9e 81       	ldd	r25, Y+6	; 0x06
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	91 05       	cpc	r25, r1
 45a:	e1 f0       	breq	.+56     	; 0x494 <DIO_enumGetPortValue+0x72>
 45c:	2d 81       	ldd	r18, Y+5	; 0x05
 45e:	3e 81       	ldd	r19, Y+6	; 0x06
 460:	22 30       	cpi	r18, 0x02	; 2
 462:	31 05       	cpc	r19, r1
 464:	2c f4       	brge	.+10     	; 0x470 <DIO_enumGetPortValue+0x4e>
 466:	8d 81       	ldd	r24, Y+5	; 0x05
 468:	9e 81       	ldd	r25, Y+6	; 0x06
 46a:	00 97       	sbiw	r24, 0x00	; 0
 46c:	61 f0       	breq	.+24     	; 0x486 <DIO_enumGetPortValue+0x64>
 46e:	26 c0       	rjmp	.+76     	; 0x4bc <DIO_enumGetPortValue+0x9a>
 470:	2d 81       	ldd	r18, Y+5	; 0x05
 472:	3e 81       	ldd	r19, Y+6	; 0x06
 474:	22 30       	cpi	r18, 0x02	; 2
 476:	31 05       	cpc	r19, r1
 478:	a1 f0       	breq	.+40     	; 0x4a2 <DIO_enumGetPortValue+0x80>
 47a:	8d 81       	ldd	r24, Y+5	; 0x05
 47c:	9e 81       	ldd	r25, Y+6	; 0x06
 47e:	83 30       	cpi	r24, 0x03	; 3
 480:	91 05       	cpc	r25, r1
 482:	b1 f0       	breq	.+44     	; 0x4b0 <DIO_enumGetPortValue+0x8e>
 484:	1b c0       	rjmp	.+54     	; 0x4bc <DIO_enumGetPortValue+0x9a>
			{
				case DIO_PORTA:
					*Copy_pu8Value=PINA;
 486:	e9 e3       	ldi	r30, 0x39	; 57
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	eb 81       	ldd	r30, Y+3	; 0x03
 48e:	fc 81       	ldd	r31, Y+4	; 0x04
 490:	80 83       	st	Z, r24
 492:	14 c0       	rjmp	.+40     	; 0x4bc <DIO_enumGetPortValue+0x9a>
					break;
				case DIO_PORTB:
					*Copy_pu8Value=PINB;
 494:	e6 e3       	ldi	r30, 0x36	; 54
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	eb 81       	ldd	r30, Y+3	; 0x03
 49c:	fc 81       	ldd	r31, Y+4	; 0x04
 49e:	80 83       	st	Z, r24
 4a0:	0d c0       	rjmp	.+26     	; 0x4bc <DIO_enumGetPortValue+0x9a>
					break;
				case DIO_PORTC:
					*Copy_pu8Value=PINC;
 4a2:	e3 e3       	ldi	r30, 0x33	; 51
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	eb 81       	ldd	r30, Y+3	; 0x03
 4aa:	fc 81       	ldd	r31, Y+4	; 0x04
 4ac:	80 83       	st	Z, r24
 4ae:	06 c0       	rjmp	.+12     	; 0x4bc <DIO_enumGetPortValue+0x9a>
					break;
				case DIO_PORTD:
					*Copy_pu8Value=PIND;
 4b0:	e0 e3       	ldi	r30, 0x30	; 48
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	eb 81       	ldd	r30, Y+3	; 0x03
 4b8:	fc 81       	ldd	r31, Y+4	; 0x04
 4ba:	80 83       	st	Z, r24
					break;
			}
			Local_enumErrorState=ES_OK;
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	89 83       	std	Y+1, r24	; 0x01
 4c0:	05 c0       	rjmp	.+10     	; 0x4cc <DIO_enumGetPortValue+0xaa>
		}
		else
		{
			Local_enumErrorState=ES_NULL_POINTER;
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	89 83       	std	Y+1, r24	; 0x01
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_enumGetPortValue+0xaa>
		}

	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
 4c8:	83 e0       	ldi	r24, 0x03	; 3
 4ca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
 4cc:	89 81       	ldd	r24, Y+1	; 0x01
}
 4ce:	26 96       	adiw	r28, 0x06	; 6
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	de bf       	out	0x3e, r29	; 62
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	cd bf       	out	0x3d, r28	; 61
 4da:	cf 91       	pop	r28
 4dc:	df 91       	pop	r29
 4de:	08 95       	ret

000004e0 <DIO_enumSetPinDirection>:

ES_T DIO_enumSetPinDirection (u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8Direction)
{
 4e0:	df 93       	push	r29
 4e2:	cf 93       	push	r28
 4e4:	00 d0       	rcall	.+0      	; 0x4e6 <DIO_enumSetPinDirection+0x6>
 4e6:	00 d0       	rcall	.+0      	; 0x4e8 <DIO_enumSetPinDirection+0x8>
 4e8:	00 d0       	rcall	.+0      	; 0x4ea <DIO_enumSetPinDirection+0xa>
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
 4ee:	8a 83       	std	Y+2, r24	; 0x02
 4f0:	6b 83       	std	Y+3, r22	; 0x03
 4f2:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enumErrorState=ES_NOK;
 4f4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Direction <= OUTPUT)
 4f6:	8a 81       	ldd	r24, Y+2	; 0x02
 4f8:	84 30       	cpi	r24, 0x04	; 4
 4fa:	08 f0       	brcs	.+2      	; 0x4fe <DIO_enumSetPinDirection+0x1e>
 4fc:	d1 c0       	rjmp	.+418    	; 0x6a0 <DIO_enumSetPinDirection+0x1c0>
 4fe:	8b 81       	ldd	r24, Y+3	; 0x03
 500:	88 30       	cpi	r24, 0x08	; 8
 502:	08 f0       	brcs	.+2      	; 0x506 <DIO_enumSetPinDirection+0x26>
 504:	cd c0       	rjmp	.+410    	; 0x6a0 <DIO_enumSetPinDirection+0x1c0>
 506:	8c 81       	ldd	r24, Y+4	; 0x04
 508:	82 30       	cpi	r24, 0x02	; 2
 50a:	08 f0       	brcs	.+2      	; 0x50e <DIO_enumSetPinDirection+0x2e>
 50c:	c9 c0       	rjmp	.+402    	; 0x6a0 <DIO_enumSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	28 2f       	mov	r18, r24
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	3e 83       	std	Y+6, r19	; 0x06
 516:	2d 83       	std	Y+5, r18	; 0x05
 518:	6d 81       	ldd	r22, Y+5	; 0x05
 51a:	7e 81       	ldd	r23, Y+6	; 0x06
 51c:	61 30       	cpi	r22, 0x01	; 1
 51e:	71 05       	cpc	r23, r1
 520:	09 f4       	brne	.+2      	; 0x524 <DIO_enumSetPinDirection+0x44>
 522:	41 c0       	rjmp	.+130    	; 0x5a6 <DIO_enumSetPinDirection+0xc6>
 524:	8d 81       	ldd	r24, Y+5	; 0x05
 526:	9e 81       	ldd	r25, Y+6	; 0x06
 528:	82 30       	cpi	r24, 0x02	; 2
 52a:	91 05       	cpc	r25, r1
 52c:	34 f4       	brge	.+12     	; 0x53a <DIO_enumSetPinDirection+0x5a>
 52e:	2d 81       	ldd	r18, Y+5	; 0x05
 530:	3e 81       	ldd	r19, Y+6	; 0x06
 532:	21 15       	cp	r18, r1
 534:	31 05       	cpc	r19, r1
 536:	71 f0       	breq	.+28     	; 0x554 <DIO_enumSetPinDirection+0x74>
 538:	b0 c0       	rjmp	.+352    	; 0x69a <DIO_enumSetPinDirection+0x1ba>
 53a:	6d 81       	ldd	r22, Y+5	; 0x05
 53c:	7e 81       	ldd	r23, Y+6	; 0x06
 53e:	62 30       	cpi	r22, 0x02	; 2
 540:	71 05       	cpc	r23, r1
 542:	09 f4       	brne	.+2      	; 0x546 <DIO_enumSetPinDirection+0x66>
 544:	59 c0       	rjmp	.+178    	; 0x5f8 <DIO_enumSetPinDirection+0x118>
 546:	8d 81       	ldd	r24, Y+5	; 0x05
 548:	9e 81       	ldd	r25, Y+6	; 0x06
 54a:	83 30       	cpi	r24, 0x03	; 3
 54c:	91 05       	cpc	r25, r1
 54e:	09 f4       	brne	.+2      	; 0x552 <DIO_enumSetPinDirection+0x72>
 550:	7c c0       	rjmp	.+248    	; 0x64a <DIO_enumSetPinDirection+0x16a>
 552:	a3 c0       	rjmp	.+326    	; 0x69a <DIO_enumSetPinDirection+0x1ba>
		{
			case DIO_PORTA:
				CLEAR_BIT(DDRA,Copy_u8PinID);
 554:	aa e3       	ldi	r26, 0x3A	; 58
 556:	b0 e0       	ldi	r27, 0x00	; 0
 558:	ea e3       	ldi	r30, 0x3A	; 58
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	48 2f       	mov	r20, r24
 560:	8b 81       	ldd	r24, Y+3	; 0x03
 562:	28 2f       	mov	r18, r24
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_enumSetPinDirection+0x90>
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	2a 95       	dec	r18
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_enumSetPinDirection+0x8c>
 574:	80 95       	com	r24
 576:	84 23       	and	r24, r20
 578:	8c 93       	st	X, r24
				DDRA |= (Copy_u8Direction << Copy_u8PinID);
 57a:	aa e3       	ldi	r26, 0x3A	; 58
 57c:	b0 e0       	ldi	r27, 0x00	; 0
 57e:	ea e3       	ldi	r30, 0x3A	; 58
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	80 81       	ld	r24, Z
 584:	48 2f       	mov	r20, r24
 586:	8c 81       	ldd	r24, Y+4	; 0x04
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	8b 81       	ldd	r24, Y+3	; 0x03
 58e:	88 2f       	mov	r24, r24
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	b9 01       	movw	r22, r18
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_enumSetPinDirection+0xba>
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	8a 95       	dec	r24
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_enumSetPinDirection+0xb6>
 59e:	cb 01       	movw	r24, r22
 5a0:	84 2b       	or	r24, r20
 5a2:	8c 93       	st	X, r24
 5a4:	7a c0       	rjmp	.+244    	; 0x69a <DIO_enumSetPinDirection+0x1ba>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB,Copy_u8PinID);
 5a6:	a7 e3       	ldi	r26, 0x37	; 55
 5a8:	b0 e0       	ldi	r27, 0x00	; 0
 5aa:	e7 e3       	ldi	r30, 0x37	; 55
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	80 81       	ld	r24, Z
 5b0:	48 2f       	mov	r20, r24
 5b2:	8b 81       	ldd	r24, Y+3	; 0x03
 5b4:	28 2f       	mov	r18, r24
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_enumSetPinDirection+0xe2>
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	2a 95       	dec	r18
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_enumSetPinDirection+0xde>
 5c6:	80 95       	com	r24
 5c8:	84 23       	and	r24, r20
 5ca:	8c 93       	st	X, r24
				DDRB |= (Copy_u8Direction << Copy_u8PinID);
 5cc:	a7 e3       	ldi	r26, 0x37	; 55
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	e7 e3       	ldi	r30, 0x37	; 55
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	48 2f       	mov	r20, r24
 5d8:	8c 81       	ldd	r24, Y+4	; 0x04
 5da:	28 2f       	mov	r18, r24
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	88 2f       	mov	r24, r24
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	b9 01       	movw	r22, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_enumSetPinDirection+0x10c>
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	8a 95       	dec	r24
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_enumSetPinDirection+0x108>
 5f0:	cb 01       	movw	r24, r22
 5f2:	84 2b       	or	r24, r20
 5f4:	8c 93       	st	X, r24
 5f6:	51 c0       	rjmp	.+162    	; 0x69a <DIO_enumSetPinDirection+0x1ba>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC,Copy_u8PinID);
 5f8:	a4 e3       	ldi	r26, 0x34	; 52
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	e4 e3       	ldi	r30, 0x34	; 52
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	48 2f       	mov	r20, r24
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	28 2f       	mov	r18, r24
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_enumSetPinDirection+0x134>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	2a 95       	dec	r18
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_enumSetPinDirection+0x130>
 618:	80 95       	com	r24
 61a:	84 23       	and	r24, r20
 61c:	8c 93       	st	X, r24
				DDRC |= (Copy_u8Direction << Copy_u8PinID);
 61e:	a4 e3       	ldi	r26, 0x34	; 52
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	e4 e3       	ldi	r30, 0x34	; 52
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	48 2f       	mov	r20, r24
 62a:	8c 81       	ldd	r24, Y+4	; 0x04
 62c:	28 2f       	mov	r18, r24
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	8b 81       	ldd	r24, Y+3	; 0x03
 632:	88 2f       	mov	r24, r24
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	b9 01       	movw	r22, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_enumSetPinDirection+0x15e>
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	8a 95       	dec	r24
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_enumSetPinDirection+0x15a>
 642:	cb 01       	movw	r24, r22
 644:	84 2b       	or	r24, r20
 646:	8c 93       	st	X, r24
 648:	28 c0       	rjmp	.+80     	; 0x69a <DIO_enumSetPinDirection+0x1ba>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD,Copy_u8PinID);
 64a:	a1 e3       	ldi	r26, 0x31	; 49
 64c:	b0 e0       	ldi	r27, 0x00	; 0
 64e:	e1 e3       	ldi	r30, 0x31	; 49
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	48 2f       	mov	r20, r24
 656:	8b 81       	ldd	r24, Y+3	; 0x03
 658:	28 2f       	mov	r18, r24
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_enumSetPinDirection+0x186>
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	2a 95       	dec	r18
 668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_enumSetPinDirection+0x182>
 66a:	80 95       	com	r24
 66c:	84 23       	and	r24, r20
 66e:	8c 93       	st	X, r24
				DDRD |= (Copy_u8Direction << Copy_u8PinID);
 670:	a1 e3       	ldi	r26, 0x31	; 49
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	e1 e3       	ldi	r30, 0x31	; 49
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	48 2f       	mov	r20, r24
 67c:	8c 81       	ldd	r24, Y+4	; 0x04
 67e:	28 2f       	mov	r18, r24
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	8b 81       	ldd	r24, Y+3	; 0x03
 684:	88 2f       	mov	r24, r24
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	b9 01       	movw	r22, r18
 68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_enumSetPinDirection+0x1b0>
 68c:	66 0f       	add	r22, r22
 68e:	77 1f       	adc	r23, r23
 690:	8a 95       	dec	r24
 692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_enumSetPinDirection+0x1ac>
 694:	cb 01       	movw	r24, r22
 696:	84 2b       	or	r24, r20
 698:	8c 93       	st	X, r24
				break;
		}
		Local_enumErrorState=ES_OK;
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	89 83       	std	Y+1, r24	; 0x01
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_enumSetPinDirection+0x1c4>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
 6a0:	83 e0       	ldi	r24, 0x03	; 3
 6a2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
 6a4:	89 81       	ldd	r24, Y+1	; 0x01
}
 6a6:	26 96       	adiw	r28, 0x06	; 6
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	f8 94       	cli
 6ac:	de bf       	out	0x3e, r29	; 62
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	cd bf       	out	0x3d, r28	; 61
 6b2:	cf 91       	pop	r28
 6b4:	df 91       	pop	r29
 6b6:	08 95       	ret

000006b8 <DIO_enumSetPinValue>:
ES_T DIO_enumSetPinValue (u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8Value)
{
 6b8:	df 93       	push	r29
 6ba:	cf 93       	push	r28
 6bc:	00 d0       	rcall	.+0      	; 0x6be <DIO_enumSetPinValue+0x6>
 6be:	00 d0       	rcall	.+0      	; 0x6c0 <DIO_enumSetPinValue+0x8>
 6c0:	00 d0       	rcall	.+0      	; 0x6c2 <DIO_enumSetPinValue+0xa>
 6c2:	cd b7       	in	r28, 0x3d	; 61
 6c4:	de b7       	in	r29, 0x3e	; 62
 6c6:	8a 83       	std	Y+2, r24	; 0x02
 6c8:	6b 83       	std	Y+3, r22	; 0x03
 6ca:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enumErrorState=ES_NOK;
 6cc:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD&&Copy_u8PinID<=DIO_PIN7&&Copy_u8Value<=OUTPUT)
 6ce:	8a 81       	ldd	r24, Y+2	; 0x02
 6d0:	84 30       	cpi	r24, 0x04	; 4
 6d2:	08 f0       	brcs	.+2      	; 0x6d6 <DIO_enumSetPinValue+0x1e>
 6d4:	d1 c0       	rjmp	.+418    	; 0x878 <__stack+0x19>
 6d6:	8b 81       	ldd	r24, Y+3	; 0x03
 6d8:	88 30       	cpi	r24, 0x08	; 8
 6da:	08 f0       	brcs	.+2      	; 0x6de <DIO_enumSetPinValue+0x26>
 6dc:	cd c0       	rjmp	.+410    	; 0x878 <__stack+0x19>
 6de:	8c 81       	ldd	r24, Y+4	; 0x04
 6e0:	82 30       	cpi	r24, 0x02	; 2
 6e2:	08 f0       	brcs	.+2      	; 0x6e6 <DIO_enumSetPinValue+0x2e>
 6e4:	c9 c0       	rjmp	.+402    	; 0x878 <__stack+0x19>
	{
		switch(Copy_u8PortID)
 6e6:	8a 81       	ldd	r24, Y+2	; 0x02
 6e8:	28 2f       	mov	r18, r24
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	3e 83       	std	Y+6, r19	; 0x06
 6ee:	2d 83       	std	Y+5, r18	; 0x05
 6f0:	6d 81       	ldd	r22, Y+5	; 0x05
 6f2:	7e 81       	ldd	r23, Y+6	; 0x06
 6f4:	61 30       	cpi	r22, 0x01	; 1
 6f6:	71 05       	cpc	r23, r1
 6f8:	09 f4       	brne	.+2      	; 0x6fc <DIO_enumSetPinValue+0x44>
 6fa:	41 c0       	rjmp	.+130    	; 0x77e <DIO_enumSetPinValue+0xc6>
 6fc:	8d 81       	ldd	r24, Y+5	; 0x05
 6fe:	9e 81       	ldd	r25, Y+6	; 0x06
 700:	82 30       	cpi	r24, 0x02	; 2
 702:	91 05       	cpc	r25, r1
 704:	34 f4       	brge	.+12     	; 0x712 <DIO_enumSetPinValue+0x5a>
 706:	2d 81       	ldd	r18, Y+5	; 0x05
 708:	3e 81       	ldd	r19, Y+6	; 0x06
 70a:	21 15       	cp	r18, r1
 70c:	31 05       	cpc	r19, r1
 70e:	71 f0       	breq	.+28     	; 0x72c <DIO_enumSetPinValue+0x74>
 710:	b0 c0       	rjmp	.+352    	; 0x872 <__stack+0x13>
 712:	6d 81       	ldd	r22, Y+5	; 0x05
 714:	7e 81       	ldd	r23, Y+6	; 0x06
 716:	62 30       	cpi	r22, 0x02	; 2
 718:	71 05       	cpc	r23, r1
 71a:	09 f4       	brne	.+2      	; 0x71e <DIO_enumSetPinValue+0x66>
 71c:	59 c0       	rjmp	.+178    	; 0x7d0 <DIO_enumSetPinValue+0x118>
 71e:	8d 81       	ldd	r24, Y+5	; 0x05
 720:	9e 81       	ldd	r25, Y+6	; 0x06
 722:	83 30       	cpi	r24, 0x03	; 3
 724:	91 05       	cpc	r25, r1
 726:	09 f4       	brne	.+2      	; 0x72a <DIO_enumSetPinValue+0x72>
 728:	7c c0       	rjmp	.+248    	; 0x822 <DIO_enumSetPinValue+0x16a>
 72a:	a3 c0       	rjmp	.+326    	; 0x872 <__stack+0x13>
		{
			case DIO_PORTA:
				CLEAR_BIT(PORTA,Copy_u8PinID);
 72c:	ab e3       	ldi	r26, 0x3B	; 59
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	eb e3       	ldi	r30, 0x3B	; 59
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	80 81       	ld	r24, Z
 736:	48 2f       	mov	r20, r24
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	28 2f       	mov	r18, r24
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	02 c0       	rjmp	.+4      	; 0x748 <DIO_enumSetPinValue+0x90>
 744:	88 0f       	add	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	2a 95       	dec	r18
 74a:	e2 f7       	brpl	.-8      	; 0x744 <DIO_enumSetPinValue+0x8c>
 74c:	80 95       	com	r24
 74e:	84 23       	and	r24, r20
 750:	8c 93       	st	X, r24
				PORTA |= (Copy_u8Value << Copy_u8PinID);
 752:	ab e3       	ldi	r26, 0x3B	; 59
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	eb e3       	ldi	r30, 0x3B	; 59
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	48 2f       	mov	r20, r24
 75e:	8c 81       	ldd	r24, Y+4	; 0x04
 760:	28 2f       	mov	r18, r24
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	8b 81       	ldd	r24, Y+3	; 0x03
 766:	88 2f       	mov	r24, r24
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	b9 01       	movw	r22, r18
 76c:	02 c0       	rjmp	.+4      	; 0x772 <DIO_enumSetPinValue+0xba>
 76e:	66 0f       	add	r22, r22
 770:	77 1f       	adc	r23, r23
 772:	8a 95       	dec	r24
 774:	e2 f7       	brpl	.-8      	; 0x76e <DIO_enumSetPinValue+0xb6>
 776:	cb 01       	movw	r24, r22
 778:	84 2b       	or	r24, r20
 77a:	8c 93       	st	X, r24
 77c:	7a c0       	rjmp	.+244    	; 0x872 <__stack+0x13>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB,Copy_u8PinID);
 77e:	a8 e3       	ldi	r26, 0x38	; 56
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	e8 e3       	ldi	r30, 0x38	; 56
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	80 81       	ld	r24, Z
 788:	48 2f       	mov	r20, r24
 78a:	8b 81       	ldd	r24, Y+3	; 0x03
 78c:	28 2f       	mov	r18, r24
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	02 c0       	rjmp	.+4      	; 0x79a <DIO_enumSetPinValue+0xe2>
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	2a 95       	dec	r18
 79c:	e2 f7       	brpl	.-8      	; 0x796 <DIO_enumSetPinValue+0xde>
 79e:	80 95       	com	r24
 7a0:	84 23       	and	r24, r20
 7a2:	8c 93       	st	X, r24
				PORTB |= (Copy_u8Value << Copy_u8PinID);
 7a4:	a8 e3       	ldi	r26, 0x38	; 56
 7a6:	b0 e0       	ldi	r27, 0x00	; 0
 7a8:	e8 e3       	ldi	r30, 0x38	; 56
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	80 81       	ld	r24, Z
 7ae:	48 2f       	mov	r20, r24
 7b0:	8c 81       	ldd	r24, Y+4	; 0x04
 7b2:	28 2f       	mov	r18, r24
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	8b 81       	ldd	r24, Y+3	; 0x03
 7b8:	88 2f       	mov	r24, r24
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	b9 01       	movw	r22, r18
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <DIO_enumSetPinValue+0x10c>
 7c0:	66 0f       	add	r22, r22
 7c2:	77 1f       	adc	r23, r23
 7c4:	8a 95       	dec	r24
 7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <DIO_enumSetPinValue+0x108>
 7c8:	cb 01       	movw	r24, r22
 7ca:	84 2b       	or	r24, r20
 7cc:	8c 93       	st	X, r24
 7ce:	51 c0       	rjmp	.+162    	; 0x872 <__stack+0x13>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC,Copy_u8PinID);
 7d0:	a5 e3       	ldi	r26, 0x35	; 53
 7d2:	b0 e0       	ldi	r27, 0x00	; 0
 7d4:	e5 e3       	ldi	r30, 0x35	; 53
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	80 81       	ld	r24, Z
 7da:	48 2f       	mov	r20, r24
 7dc:	8b 81       	ldd	r24, Y+3	; 0x03
 7de:	28 2f       	mov	r18, r24
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <DIO_enumSetPinValue+0x134>
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	2a 95       	dec	r18
 7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <DIO_enumSetPinValue+0x130>
 7f0:	80 95       	com	r24
 7f2:	84 23       	and	r24, r20
 7f4:	8c 93       	st	X, r24
				PORTC |= (Copy_u8Value << Copy_u8PinID);
 7f6:	a5 e3       	ldi	r26, 0x35	; 53
 7f8:	b0 e0       	ldi	r27, 0x00	; 0
 7fa:	e5 e3       	ldi	r30, 0x35	; 53
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	80 81       	ld	r24, Z
 800:	48 2f       	mov	r20, r24
 802:	8c 81       	ldd	r24, Y+4	; 0x04
 804:	28 2f       	mov	r18, r24
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	8b 81       	ldd	r24, Y+3	; 0x03
 80a:	88 2f       	mov	r24, r24
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	b9 01       	movw	r22, r18
 810:	02 c0       	rjmp	.+4      	; 0x816 <DIO_enumSetPinValue+0x15e>
 812:	66 0f       	add	r22, r22
 814:	77 1f       	adc	r23, r23
 816:	8a 95       	dec	r24
 818:	e2 f7       	brpl	.-8      	; 0x812 <DIO_enumSetPinValue+0x15a>
 81a:	cb 01       	movw	r24, r22
 81c:	84 2b       	or	r24, r20
 81e:	8c 93       	st	X, r24
 820:	28 c0       	rjmp	.+80     	; 0x872 <__stack+0x13>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD,Copy_u8PinID);
 822:	a2 e3       	ldi	r26, 0x32	; 50
 824:	b0 e0       	ldi	r27, 0x00	; 0
 826:	e2 e3       	ldi	r30, 0x32	; 50
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
 82c:	48 2f       	mov	r20, r24
 82e:	8b 81       	ldd	r24, Y+3	; 0x03
 830:	28 2f       	mov	r18, r24
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	02 c0       	rjmp	.+4      	; 0x83e <DIO_enumSetPinValue+0x186>
 83a:	88 0f       	add	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	2a 95       	dec	r18
 840:	e2 f7       	brpl	.-8      	; 0x83a <DIO_enumSetPinValue+0x182>
 842:	80 95       	com	r24
 844:	84 23       	and	r24, r20
 846:	8c 93       	st	X, r24
				PORTD |= (Copy_u8Value << Copy_u8PinID);
 848:	a2 e3       	ldi	r26, 0x32	; 50
 84a:	b0 e0       	ldi	r27, 0x00	; 0
 84c:	e2 e3       	ldi	r30, 0x32	; 50
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	80 81       	ld	r24, Z
 852:	48 2f       	mov	r20, r24
 854:	8c 81       	ldd	r24, Y+4	; 0x04
 856:	28 2f       	mov	r18, r24
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	8b 81       	ldd	r24, Y+3	; 0x03
 85c:	88 2f       	mov	r24, r24
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	b9 01       	movw	r22, r18
 862:	02 c0       	rjmp	.+4      	; 0x868 <__stack+0x9>
 864:	66 0f       	add	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	8a 95       	dec	r24
 86a:	e2 f7       	brpl	.-8      	; 0x864 <__stack+0x5>
 86c:	cb 01       	movw	r24, r22
 86e:	84 2b       	or	r24, r20
 870:	8c 93       	st	X, r24
				break;
		}
		Local_enumErrorState=ES_OK;
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	89 83       	std	Y+1, r24	; 0x01
 876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
 878:	83 e0       	ldi	r24, 0x03	; 3
 87a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
 87c:	89 81       	ldd	r24, Y+1	; 0x01
}
 87e:	26 96       	adiw	r28, 0x06	; 6
 880:	0f b6       	in	r0, 0x3f	; 63
 882:	f8 94       	cli
 884:	de bf       	out	0x3e, r29	; 62
 886:	0f be       	out	0x3f, r0	; 63
 888:	cd bf       	out	0x3d, r28	; 61
 88a:	cf 91       	pop	r28
 88c:	df 91       	pop	r29
 88e:	08 95       	ret

00000890 <DIO_enumTogglePinDirection>:
ES_T DIO_enumTogglePinDirection (u8 Copy_u8PortID,u8 Copy_u8PinID)
{
 890:	df 93       	push	r29
 892:	cf 93       	push	r28
 894:	00 d0       	rcall	.+0      	; 0x896 <DIO_enumTogglePinDirection+0x6>
 896:	00 d0       	rcall	.+0      	; 0x898 <DIO_enumTogglePinDirection+0x8>
 898:	0f 92       	push	r0
 89a:	cd b7       	in	r28, 0x3d	; 61
 89c:	de b7       	in	r29, 0x3e	; 62
 89e:	8a 83       	std	Y+2, r24	; 0x02
 8a0:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enumErrorState=ES_NOK;
 8a2:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
 8a4:	8a 81       	ldd	r24, Y+2	; 0x02
 8a6:	84 30       	cpi	r24, 0x04	; 4
 8a8:	08 f0       	brcs	.+2      	; 0x8ac <DIO_enumTogglePinDirection+0x1c>
 8aa:	75 c0       	rjmp	.+234    	; 0x996 <DIO_enumTogglePinDirection+0x106>
 8ac:	8b 81       	ldd	r24, Y+3	; 0x03
 8ae:	88 30       	cpi	r24, 0x08	; 8
 8b0:	08 f0       	brcs	.+2      	; 0x8b4 <DIO_enumTogglePinDirection+0x24>
 8b2:	71 c0       	rjmp	.+226    	; 0x996 <DIO_enumTogglePinDirection+0x106>
	{
		switch(Copy_u8PortID)
 8b4:	8a 81       	ldd	r24, Y+2	; 0x02
 8b6:	28 2f       	mov	r18, r24
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	3d 83       	std	Y+5, r19	; 0x05
 8bc:	2c 83       	std	Y+4, r18	; 0x04
 8be:	8c 81       	ldd	r24, Y+4	; 0x04
 8c0:	9d 81       	ldd	r25, Y+5	; 0x05
 8c2:	81 30       	cpi	r24, 0x01	; 1
 8c4:	91 05       	cpc	r25, r1
 8c6:	49 f1       	breq	.+82     	; 0x91a <DIO_enumTogglePinDirection+0x8a>
 8c8:	2c 81       	ldd	r18, Y+4	; 0x04
 8ca:	3d 81       	ldd	r19, Y+5	; 0x05
 8cc:	22 30       	cpi	r18, 0x02	; 2
 8ce:	31 05       	cpc	r19, r1
 8d0:	2c f4       	brge	.+10     	; 0x8dc <DIO_enumTogglePinDirection+0x4c>
 8d2:	8c 81       	ldd	r24, Y+4	; 0x04
 8d4:	9d 81       	ldd	r25, Y+5	; 0x05
 8d6:	00 97       	sbiw	r24, 0x00	; 0
 8d8:	61 f0       	breq	.+24     	; 0x8f2 <DIO_enumTogglePinDirection+0x62>
 8da:	5a c0       	rjmp	.+180    	; 0x990 <DIO_enumTogglePinDirection+0x100>
 8dc:	2c 81       	ldd	r18, Y+4	; 0x04
 8de:	3d 81       	ldd	r19, Y+5	; 0x05
 8e0:	22 30       	cpi	r18, 0x02	; 2
 8e2:	31 05       	cpc	r19, r1
 8e4:	71 f1       	breq	.+92     	; 0x942 <DIO_enumTogglePinDirection+0xb2>
 8e6:	8c 81       	ldd	r24, Y+4	; 0x04
 8e8:	9d 81       	ldd	r25, Y+5	; 0x05
 8ea:	83 30       	cpi	r24, 0x03	; 3
 8ec:	91 05       	cpc	r25, r1
 8ee:	e9 f1       	breq	.+122    	; 0x96a <DIO_enumTogglePinDirection+0xda>
 8f0:	4f c0       	rjmp	.+158    	; 0x990 <DIO_enumTogglePinDirection+0x100>
		{
			case DIO_PORTA:
				TOGGLE_BIT(DDRA,Copy_u8PinID);
 8f2:	aa e3       	ldi	r26, 0x3A	; 58
 8f4:	b0 e0       	ldi	r27, 0x00	; 0
 8f6:	ea e3       	ldi	r30, 0x3A	; 58
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	80 81       	ld	r24, Z
 8fc:	48 2f       	mov	r20, r24
 8fe:	8b 81       	ldd	r24, Y+3	; 0x03
 900:	28 2f       	mov	r18, r24
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	02 2e       	mov	r0, r18
 90a:	02 c0       	rjmp	.+4      	; 0x910 <DIO_enumTogglePinDirection+0x80>
 90c:	88 0f       	add	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	0a 94       	dec	r0
 912:	e2 f7       	brpl	.-8      	; 0x90c <DIO_enumTogglePinDirection+0x7c>
 914:	84 27       	eor	r24, r20
 916:	8c 93       	st	X, r24
 918:	3b c0       	rjmp	.+118    	; 0x990 <DIO_enumTogglePinDirection+0x100>
				break;
			case DIO_PORTB:
				TOGGLE_BIT(DDRB,Copy_u8PinID);
 91a:	a7 e3       	ldi	r26, 0x37	; 55
 91c:	b0 e0       	ldi	r27, 0x00	; 0
 91e:	e7 e3       	ldi	r30, 0x37	; 55
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	48 2f       	mov	r20, r24
 926:	8b 81       	ldd	r24, Y+3	; 0x03
 928:	28 2f       	mov	r18, r24
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	02 2e       	mov	r0, r18
 932:	02 c0       	rjmp	.+4      	; 0x938 <DIO_enumTogglePinDirection+0xa8>
 934:	88 0f       	add	r24, r24
 936:	99 1f       	adc	r25, r25
 938:	0a 94       	dec	r0
 93a:	e2 f7       	brpl	.-8      	; 0x934 <DIO_enumTogglePinDirection+0xa4>
 93c:	84 27       	eor	r24, r20
 93e:	8c 93       	st	X, r24
 940:	27 c0       	rjmp	.+78     	; 0x990 <DIO_enumTogglePinDirection+0x100>
				break;
			case DIO_PORTC:
				TOGGLE_BIT(DDRC,Copy_u8PinID);
 942:	a4 e3       	ldi	r26, 0x34	; 52
 944:	b0 e0       	ldi	r27, 0x00	; 0
 946:	e4 e3       	ldi	r30, 0x34	; 52
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	48 2f       	mov	r20, r24
 94e:	8b 81       	ldd	r24, Y+3	; 0x03
 950:	28 2f       	mov	r18, r24
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	02 2e       	mov	r0, r18
 95a:	02 c0       	rjmp	.+4      	; 0x960 <DIO_enumTogglePinDirection+0xd0>
 95c:	88 0f       	add	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	0a 94       	dec	r0
 962:	e2 f7       	brpl	.-8      	; 0x95c <DIO_enumTogglePinDirection+0xcc>
 964:	84 27       	eor	r24, r20
 966:	8c 93       	st	X, r24
 968:	13 c0       	rjmp	.+38     	; 0x990 <DIO_enumTogglePinDirection+0x100>
				break;
			case DIO_PORTD:
				TOGGLE_BIT(DDRD,Copy_u8PinID);
 96a:	a1 e3       	ldi	r26, 0x31	; 49
 96c:	b0 e0       	ldi	r27, 0x00	; 0
 96e:	e1 e3       	ldi	r30, 0x31	; 49
 970:	f0 e0       	ldi	r31, 0x00	; 0
 972:	80 81       	ld	r24, Z
 974:	48 2f       	mov	r20, r24
 976:	8b 81       	ldd	r24, Y+3	; 0x03
 978:	28 2f       	mov	r18, r24
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	02 2e       	mov	r0, r18
 982:	02 c0       	rjmp	.+4      	; 0x988 <DIO_enumTogglePinDirection+0xf8>
 984:	88 0f       	add	r24, r24
 986:	99 1f       	adc	r25, r25
 988:	0a 94       	dec	r0
 98a:	e2 f7       	brpl	.-8      	; 0x984 <DIO_enumTogglePinDirection+0xf4>
 98c:	84 27       	eor	r24, r20
 98e:	8c 93       	st	X, r24
				break;
		}
		Local_enumErrorState=ES_OK;
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	89 83       	std	Y+1, r24	; 0x01
 994:	02 c0       	rjmp	.+4      	; 0x99a <DIO_enumTogglePinDirection+0x10a>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
 996:	83 e0       	ldi	r24, 0x03	; 3
 998:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
 99a:	89 81       	ldd	r24, Y+1	; 0x01
}
 99c:	0f 90       	pop	r0
 99e:	0f 90       	pop	r0
 9a0:	0f 90       	pop	r0
 9a2:	0f 90       	pop	r0
 9a4:	0f 90       	pop	r0
 9a6:	cf 91       	pop	r28
 9a8:	df 91       	pop	r29
 9aa:	08 95       	ret

000009ac <DIO_enumTogglePinValue>:
ES_T DIO_enumTogglePinValue (u8 Copy_u8PortID,u8 Copy_u8PinID)
{
 9ac:	df 93       	push	r29
 9ae:	cf 93       	push	r28
 9b0:	00 d0       	rcall	.+0      	; 0x9b2 <DIO_enumTogglePinValue+0x6>
 9b2:	00 d0       	rcall	.+0      	; 0x9b4 <DIO_enumTogglePinValue+0x8>
 9b4:	0f 92       	push	r0
 9b6:	cd b7       	in	r28, 0x3d	; 61
 9b8:	de b7       	in	r29, 0x3e	; 62
 9ba:	8a 83       	std	Y+2, r24	; 0x02
 9bc:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enumErrorState=ES_NOK;
 9be:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
 9c0:	8a 81       	ldd	r24, Y+2	; 0x02
 9c2:	84 30       	cpi	r24, 0x04	; 4
 9c4:	08 f0       	brcs	.+2      	; 0x9c8 <DIO_enumTogglePinValue+0x1c>
 9c6:	75 c0       	rjmp	.+234    	; 0xab2 <DIO_enumTogglePinValue+0x106>
 9c8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ca:	88 30       	cpi	r24, 0x08	; 8
 9cc:	08 f0       	brcs	.+2      	; 0x9d0 <DIO_enumTogglePinValue+0x24>
 9ce:	71 c0       	rjmp	.+226    	; 0xab2 <DIO_enumTogglePinValue+0x106>
	{
		switch(Copy_u8PortID)
 9d0:	8a 81       	ldd	r24, Y+2	; 0x02
 9d2:	28 2f       	mov	r18, r24
 9d4:	30 e0       	ldi	r19, 0x00	; 0
 9d6:	3d 83       	std	Y+5, r19	; 0x05
 9d8:	2c 83       	std	Y+4, r18	; 0x04
 9da:	8c 81       	ldd	r24, Y+4	; 0x04
 9dc:	9d 81       	ldd	r25, Y+5	; 0x05
 9de:	81 30       	cpi	r24, 0x01	; 1
 9e0:	91 05       	cpc	r25, r1
 9e2:	49 f1       	breq	.+82     	; 0xa36 <DIO_enumTogglePinValue+0x8a>
 9e4:	2c 81       	ldd	r18, Y+4	; 0x04
 9e6:	3d 81       	ldd	r19, Y+5	; 0x05
 9e8:	22 30       	cpi	r18, 0x02	; 2
 9ea:	31 05       	cpc	r19, r1
 9ec:	2c f4       	brge	.+10     	; 0x9f8 <DIO_enumTogglePinValue+0x4c>
 9ee:	8c 81       	ldd	r24, Y+4	; 0x04
 9f0:	9d 81       	ldd	r25, Y+5	; 0x05
 9f2:	00 97       	sbiw	r24, 0x00	; 0
 9f4:	61 f0       	breq	.+24     	; 0xa0e <DIO_enumTogglePinValue+0x62>
 9f6:	5a c0       	rjmp	.+180    	; 0xaac <DIO_enumTogglePinValue+0x100>
 9f8:	2c 81       	ldd	r18, Y+4	; 0x04
 9fa:	3d 81       	ldd	r19, Y+5	; 0x05
 9fc:	22 30       	cpi	r18, 0x02	; 2
 9fe:	31 05       	cpc	r19, r1
 a00:	71 f1       	breq	.+92     	; 0xa5e <DIO_enumTogglePinValue+0xb2>
 a02:	8c 81       	ldd	r24, Y+4	; 0x04
 a04:	9d 81       	ldd	r25, Y+5	; 0x05
 a06:	83 30       	cpi	r24, 0x03	; 3
 a08:	91 05       	cpc	r25, r1
 a0a:	e9 f1       	breq	.+122    	; 0xa86 <DIO_enumTogglePinValue+0xda>
 a0c:	4f c0       	rjmp	.+158    	; 0xaac <DIO_enumTogglePinValue+0x100>
		{
			case DIO_PORTA:
				TOGGLE_BIT(PORTA,Copy_u8PinID);
 a0e:	ab e3       	ldi	r26, 0x3B	; 59
 a10:	b0 e0       	ldi	r27, 0x00	; 0
 a12:	eb e3       	ldi	r30, 0x3B	; 59
 a14:	f0 e0       	ldi	r31, 0x00	; 0
 a16:	80 81       	ld	r24, Z
 a18:	48 2f       	mov	r20, r24
 a1a:	8b 81       	ldd	r24, Y+3	; 0x03
 a1c:	28 2f       	mov	r18, r24
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	02 2e       	mov	r0, r18
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <DIO_enumTogglePinValue+0x80>
 a28:	88 0f       	add	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	0a 94       	dec	r0
 a2e:	e2 f7       	brpl	.-8      	; 0xa28 <DIO_enumTogglePinValue+0x7c>
 a30:	84 27       	eor	r24, r20
 a32:	8c 93       	st	X, r24
 a34:	3b c0       	rjmp	.+118    	; 0xaac <DIO_enumTogglePinValue+0x100>
				break;
			case DIO_PORTB:
				TOGGLE_BIT(PORTB,Copy_u8PinID);
 a36:	a8 e3       	ldi	r26, 0x38	; 56
 a38:	b0 e0       	ldi	r27, 0x00	; 0
 a3a:	e8 e3       	ldi	r30, 0x38	; 56
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	80 81       	ld	r24, Z
 a40:	48 2f       	mov	r20, r24
 a42:	8b 81       	ldd	r24, Y+3	; 0x03
 a44:	28 2f       	mov	r18, r24
 a46:	30 e0       	ldi	r19, 0x00	; 0
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	02 2e       	mov	r0, r18
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <DIO_enumTogglePinValue+0xa8>
 a50:	88 0f       	add	r24, r24
 a52:	99 1f       	adc	r25, r25
 a54:	0a 94       	dec	r0
 a56:	e2 f7       	brpl	.-8      	; 0xa50 <DIO_enumTogglePinValue+0xa4>
 a58:	84 27       	eor	r24, r20
 a5a:	8c 93       	st	X, r24
 a5c:	27 c0       	rjmp	.+78     	; 0xaac <DIO_enumTogglePinValue+0x100>
				break;
			case DIO_PORTC:
				TOGGLE_BIT(PORTC,Copy_u8PinID);
 a5e:	a5 e3       	ldi	r26, 0x35	; 53
 a60:	b0 e0       	ldi	r27, 0x00	; 0
 a62:	e5 e3       	ldi	r30, 0x35	; 53
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	80 81       	ld	r24, Z
 a68:	48 2f       	mov	r20, r24
 a6a:	8b 81       	ldd	r24, Y+3	; 0x03
 a6c:	28 2f       	mov	r18, r24
 a6e:	30 e0       	ldi	r19, 0x00	; 0
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	02 2e       	mov	r0, r18
 a76:	02 c0       	rjmp	.+4      	; 0xa7c <DIO_enumTogglePinValue+0xd0>
 a78:	88 0f       	add	r24, r24
 a7a:	99 1f       	adc	r25, r25
 a7c:	0a 94       	dec	r0
 a7e:	e2 f7       	brpl	.-8      	; 0xa78 <DIO_enumTogglePinValue+0xcc>
 a80:	84 27       	eor	r24, r20
 a82:	8c 93       	st	X, r24
 a84:	13 c0       	rjmp	.+38     	; 0xaac <DIO_enumTogglePinValue+0x100>
				break;
			case DIO_PORTD:
				TOGGLE_BIT(PORTD,Copy_u8PinID);
 a86:	a2 e3       	ldi	r26, 0x32	; 50
 a88:	b0 e0       	ldi	r27, 0x00	; 0
 a8a:	e2 e3       	ldi	r30, 0x32	; 50
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	80 81       	ld	r24, Z
 a90:	48 2f       	mov	r20, r24
 a92:	8b 81       	ldd	r24, Y+3	; 0x03
 a94:	28 2f       	mov	r18, r24
 a96:	30 e0       	ldi	r19, 0x00	; 0
 a98:	81 e0       	ldi	r24, 0x01	; 1
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	02 2e       	mov	r0, r18
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <DIO_enumTogglePinValue+0xf8>
 aa0:	88 0f       	add	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	0a 94       	dec	r0
 aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <DIO_enumTogglePinValue+0xf4>
 aa8:	84 27       	eor	r24, r20
 aaa:	8c 93       	st	X, r24
				break;
		}
		Local_enumErrorState=ES_OK;
 aac:	81 e0       	ldi	r24, 0x01	; 1
 aae:	89 83       	std	Y+1, r24	; 0x01
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <DIO_enumTogglePinValue+0x10a>
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
 ab2:	83 e0       	ldi	r24, 0x03	; 3
 ab4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
 ab6:	89 81       	ldd	r24, Y+1	; 0x01
}
 ab8:	0f 90       	pop	r0
 aba:	0f 90       	pop	r0
 abc:	0f 90       	pop	r0
 abe:	0f 90       	pop	r0
 ac0:	0f 90       	pop	r0
 ac2:	cf 91       	pop	r28
 ac4:	df 91       	pop	r29
 ac6:	08 95       	ret

00000ac8 <DIO_enumGetPinDirection>:
ES_T DIO_enumGetPinDirection (u8 Copy_u8PortID,u8 Copy_u8PinID,u8 *Copy_pu8Direction)
{
 ac8:	df 93       	push	r29
 aca:	cf 93       	push	r28
 acc:	cd b7       	in	r28, 0x3d	; 61
 ace:	de b7       	in	r29, 0x3e	; 62
 ad0:	27 97       	sbiw	r28, 0x07	; 7
 ad2:	0f b6       	in	r0, 0x3f	; 63
 ad4:	f8 94       	cli
 ad6:	de bf       	out	0x3e, r29	; 62
 ad8:	0f be       	out	0x3f, r0	; 63
 ada:	cd bf       	out	0x3d, r28	; 61
 adc:	8a 83       	std	Y+2, r24	; 0x02
 ade:	6b 83       	std	Y+3, r22	; 0x03
 ae0:	5d 83       	std	Y+5, r21	; 0x05
 ae2:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enumErrorState=ES_NOK;
 ae4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
 ae6:	8a 81       	ldd	r24, Y+2	; 0x02
 ae8:	84 30       	cpi	r24, 0x04	; 4
 aea:	08 f0       	brcs	.+2      	; 0xaee <DIO_enumGetPinDirection+0x26>
 aec:	7f c0       	rjmp	.+254    	; 0xbec <DIO_enumGetPinDirection+0x124>
 aee:	8b 81       	ldd	r24, Y+3	; 0x03
 af0:	88 30       	cpi	r24, 0x08	; 8
 af2:	08 f0       	brcs	.+2      	; 0xaf6 <DIO_enumGetPinDirection+0x2e>
 af4:	7b c0       	rjmp	.+246    	; 0xbec <DIO_enumGetPinDirection+0x124>
		{
			if (Copy_pu8Direction!=NULL)
 af6:	8c 81       	ldd	r24, Y+4	; 0x04
 af8:	9d 81       	ldd	r25, Y+5	; 0x05
 afa:	00 97       	sbiw	r24, 0x00	; 0
 afc:	09 f4       	brne	.+2      	; 0xb00 <DIO_enumGetPinDirection+0x38>
 afe:	73 c0       	rjmp	.+230    	; 0xbe6 <DIO_enumGetPinDirection+0x11e>
			{
				switch(Copy_u8PortID)
 b00:	8a 81       	ldd	r24, Y+2	; 0x02
 b02:	28 2f       	mov	r18, r24
 b04:	30 e0       	ldi	r19, 0x00	; 0
 b06:	3f 83       	std	Y+7, r19	; 0x07
 b08:	2e 83       	std	Y+6, r18	; 0x06
 b0a:	4e 81       	ldd	r20, Y+6	; 0x06
 b0c:	5f 81       	ldd	r21, Y+7	; 0x07
 b0e:	41 30       	cpi	r20, 0x01	; 1
 b10:	51 05       	cpc	r21, r1
 b12:	59 f1       	breq	.+86     	; 0xb6a <DIO_enumGetPinDirection+0xa2>
 b14:	8e 81       	ldd	r24, Y+6	; 0x06
 b16:	9f 81       	ldd	r25, Y+7	; 0x07
 b18:	82 30       	cpi	r24, 0x02	; 2
 b1a:	91 05       	cpc	r25, r1
 b1c:	34 f4       	brge	.+12     	; 0xb2a <DIO_enumGetPinDirection+0x62>
 b1e:	2e 81       	ldd	r18, Y+6	; 0x06
 b20:	3f 81       	ldd	r19, Y+7	; 0x07
 b22:	21 15       	cp	r18, r1
 b24:	31 05       	cpc	r19, r1
 b26:	69 f0       	breq	.+26     	; 0xb42 <DIO_enumGetPinDirection+0x7a>
 b28:	5b c0       	rjmp	.+182    	; 0xbe0 <DIO_enumGetPinDirection+0x118>
 b2a:	4e 81       	ldd	r20, Y+6	; 0x06
 b2c:	5f 81       	ldd	r21, Y+7	; 0x07
 b2e:	42 30       	cpi	r20, 0x02	; 2
 b30:	51 05       	cpc	r21, r1
 b32:	79 f1       	breq	.+94     	; 0xb92 <DIO_enumGetPinDirection+0xca>
 b34:	8e 81       	ldd	r24, Y+6	; 0x06
 b36:	9f 81       	ldd	r25, Y+7	; 0x07
 b38:	83 30       	cpi	r24, 0x03	; 3
 b3a:	91 05       	cpc	r25, r1
 b3c:	09 f4       	brne	.+2      	; 0xb40 <DIO_enumGetPinDirection+0x78>
 b3e:	3d c0       	rjmp	.+122    	; 0xbba <DIO_enumGetPinDirection+0xf2>
 b40:	4f c0       	rjmp	.+158    	; 0xbe0 <DIO_enumGetPinDirection+0x118>
				{
					case DIO_PORTA:
						*Copy_pu8Direction=READ_BIT(DDRA,Copy_u8PinID);
 b42:	ea e3       	ldi	r30, 0x3A	; 58
 b44:	f0 e0       	ldi	r31, 0x00	; 0
 b46:	80 81       	ld	r24, Z
 b48:	28 2f       	mov	r18, r24
 b4a:	30 e0       	ldi	r19, 0x00	; 0
 b4c:	8b 81       	ldd	r24, Y+3	; 0x03
 b4e:	88 2f       	mov	r24, r24
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	a9 01       	movw	r20, r18
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <DIO_enumGetPinDirection+0x92>
 b56:	55 95       	asr	r21
 b58:	47 95       	ror	r20
 b5a:	8a 95       	dec	r24
 b5c:	e2 f7       	brpl	.-8      	; 0xb56 <DIO_enumGetPinDirection+0x8e>
 b5e:	ca 01       	movw	r24, r20
 b60:	81 70       	andi	r24, 0x01	; 1
 b62:	ec 81       	ldd	r30, Y+4	; 0x04
 b64:	fd 81       	ldd	r31, Y+5	; 0x05
 b66:	80 83       	st	Z, r24
 b68:	3b c0       	rjmp	.+118    	; 0xbe0 <DIO_enumGetPinDirection+0x118>
						break;
					case DIO_PORTB:
						*Copy_pu8Direction=READ_BIT(DDRB,Copy_u8PinID);
 b6a:	e7 e3       	ldi	r30, 0x37	; 55
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 81       	ld	r24, Z
 b70:	28 2f       	mov	r18, r24
 b72:	30 e0       	ldi	r19, 0x00	; 0
 b74:	8b 81       	ldd	r24, Y+3	; 0x03
 b76:	88 2f       	mov	r24, r24
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	a9 01       	movw	r20, r18
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <DIO_enumGetPinDirection+0xba>
 b7e:	55 95       	asr	r21
 b80:	47 95       	ror	r20
 b82:	8a 95       	dec	r24
 b84:	e2 f7       	brpl	.-8      	; 0xb7e <DIO_enumGetPinDirection+0xb6>
 b86:	ca 01       	movw	r24, r20
 b88:	81 70       	andi	r24, 0x01	; 1
 b8a:	ec 81       	ldd	r30, Y+4	; 0x04
 b8c:	fd 81       	ldd	r31, Y+5	; 0x05
 b8e:	80 83       	st	Z, r24
 b90:	27 c0       	rjmp	.+78     	; 0xbe0 <DIO_enumGetPinDirection+0x118>
						break;
					case DIO_PORTC:
						*Copy_pu8Direction=READ_BIT(DDRC,Copy_u8PinID);
 b92:	e4 e3       	ldi	r30, 0x34	; 52
 b94:	f0 e0       	ldi	r31, 0x00	; 0
 b96:	80 81       	ld	r24, Z
 b98:	28 2f       	mov	r18, r24
 b9a:	30 e0       	ldi	r19, 0x00	; 0
 b9c:	8b 81       	ldd	r24, Y+3	; 0x03
 b9e:	88 2f       	mov	r24, r24
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	a9 01       	movw	r20, r18
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <DIO_enumGetPinDirection+0xe2>
 ba6:	55 95       	asr	r21
 ba8:	47 95       	ror	r20
 baa:	8a 95       	dec	r24
 bac:	e2 f7       	brpl	.-8      	; 0xba6 <DIO_enumGetPinDirection+0xde>
 bae:	ca 01       	movw	r24, r20
 bb0:	81 70       	andi	r24, 0x01	; 1
 bb2:	ec 81       	ldd	r30, Y+4	; 0x04
 bb4:	fd 81       	ldd	r31, Y+5	; 0x05
 bb6:	80 83       	st	Z, r24
 bb8:	13 c0       	rjmp	.+38     	; 0xbe0 <DIO_enumGetPinDirection+0x118>
						break;
					case DIO_PORTD:
						*Copy_pu8Direction=READ_BIT(DDRD,Copy_u8PinID);
 bba:	e1 e3       	ldi	r30, 0x31	; 49
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	80 81       	ld	r24, Z
 bc0:	28 2f       	mov	r18, r24
 bc2:	30 e0       	ldi	r19, 0x00	; 0
 bc4:	8b 81       	ldd	r24, Y+3	; 0x03
 bc6:	88 2f       	mov	r24, r24
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	a9 01       	movw	r20, r18
 bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <DIO_enumGetPinDirection+0x10a>
 bce:	55 95       	asr	r21
 bd0:	47 95       	ror	r20
 bd2:	8a 95       	dec	r24
 bd4:	e2 f7       	brpl	.-8      	; 0xbce <DIO_enumGetPinDirection+0x106>
 bd6:	ca 01       	movw	r24, r20
 bd8:	81 70       	andi	r24, 0x01	; 1
 bda:	ec 81       	ldd	r30, Y+4	; 0x04
 bdc:	fd 81       	ldd	r31, Y+5	; 0x05
 bde:	80 83       	st	Z, r24
						break;
				}
				Local_enumErrorState=ES_OK;
 be0:	81 e0       	ldi	r24, 0x01	; 1
 be2:	89 83       	std	Y+1, r24	; 0x01
 be4:	05 c0       	rjmp	.+10     	; 0xbf0 <DIO_enumGetPinDirection+0x128>
			}
			else
			{
				Local_enumErrorState=ES_NULL_POINTER;
 be6:	82 e0       	ldi	r24, 0x02	; 2
 be8:	89 83       	std	Y+1, r24	; 0x01
 bea:	02 c0       	rjmp	.+4      	; 0xbf0 <DIO_enumGetPinDirection+0x128>
			}
		}
		else
		{
			Local_enumErrorState=ES_OUT_OF_RANGE;
 bec:	83 e0       	ldi	r24, 0x03	; 3
 bee:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enumErrorState;
 bf0:	89 81       	ldd	r24, Y+1	; 0x01
}
 bf2:	27 96       	adiw	r28, 0x07	; 7
 bf4:	0f b6       	in	r0, 0x3f	; 63
 bf6:	f8 94       	cli
 bf8:	de bf       	out	0x3e, r29	; 62
 bfa:	0f be       	out	0x3f, r0	; 63
 bfc:	cd bf       	out	0x3d, r28	; 61
 bfe:	cf 91       	pop	r28
 c00:	df 91       	pop	r29
 c02:	08 95       	ret

00000c04 <DIO_enumGetPinValue>:
ES_T DIO_enumGetPinValue (u8 Copy_u8PortID,u8 Copy_u8PinID,u8 *Copy_pu8Value)
{
 c04:	df 93       	push	r29
 c06:	cf 93       	push	r28
 c08:	cd b7       	in	r28, 0x3d	; 61
 c0a:	de b7       	in	r29, 0x3e	; 62
 c0c:	27 97       	sbiw	r28, 0x07	; 7
 c0e:	0f b6       	in	r0, 0x3f	; 63
 c10:	f8 94       	cli
 c12:	de bf       	out	0x3e, r29	; 62
 c14:	0f be       	out	0x3f, r0	; 63
 c16:	cd bf       	out	0x3d, r28	; 61
 c18:	8a 83       	std	Y+2, r24	; 0x02
 c1a:	6b 83       	std	Y+3, r22	; 0x03
 c1c:	5d 83       	std	Y+5, r21	; 0x05
 c1e:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enumErrorState=ES_NOK;
 c20:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID<=DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
 c22:	8a 81       	ldd	r24, Y+2	; 0x02
 c24:	84 30       	cpi	r24, 0x04	; 4
 c26:	08 f0       	brcs	.+2      	; 0xc2a <DIO_enumGetPinValue+0x26>
 c28:	7f c0       	rjmp	.+254    	; 0xd28 <DIO_enumGetPinValue+0x124>
 c2a:	8b 81       	ldd	r24, Y+3	; 0x03
 c2c:	88 30       	cpi	r24, 0x08	; 8
 c2e:	08 f0       	brcs	.+2      	; 0xc32 <DIO_enumGetPinValue+0x2e>
 c30:	7b c0       	rjmp	.+246    	; 0xd28 <DIO_enumGetPinValue+0x124>
	{
		if (Copy_pu8Value!=NULL)
 c32:	8c 81       	ldd	r24, Y+4	; 0x04
 c34:	9d 81       	ldd	r25, Y+5	; 0x05
 c36:	00 97       	sbiw	r24, 0x00	; 0
 c38:	09 f4       	brne	.+2      	; 0xc3c <DIO_enumGetPinValue+0x38>
 c3a:	73 c0       	rjmp	.+230    	; 0xd22 <DIO_enumGetPinValue+0x11e>
		{
			switch(Copy_u8PortID)
 c3c:	8a 81       	ldd	r24, Y+2	; 0x02
 c3e:	28 2f       	mov	r18, r24
 c40:	30 e0       	ldi	r19, 0x00	; 0
 c42:	3f 83       	std	Y+7, r19	; 0x07
 c44:	2e 83       	std	Y+6, r18	; 0x06
 c46:	4e 81       	ldd	r20, Y+6	; 0x06
 c48:	5f 81       	ldd	r21, Y+7	; 0x07
 c4a:	41 30       	cpi	r20, 0x01	; 1
 c4c:	51 05       	cpc	r21, r1
 c4e:	59 f1       	breq	.+86     	; 0xca6 <DIO_enumGetPinValue+0xa2>
 c50:	8e 81       	ldd	r24, Y+6	; 0x06
 c52:	9f 81       	ldd	r25, Y+7	; 0x07
 c54:	82 30       	cpi	r24, 0x02	; 2
 c56:	91 05       	cpc	r25, r1
 c58:	34 f4       	brge	.+12     	; 0xc66 <DIO_enumGetPinValue+0x62>
 c5a:	2e 81       	ldd	r18, Y+6	; 0x06
 c5c:	3f 81       	ldd	r19, Y+7	; 0x07
 c5e:	21 15       	cp	r18, r1
 c60:	31 05       	cpc	r19, r1
 c62:	69 f0       	breq	.+26     	; 0xc7e <DIO_enumGetPinValue+0x7a>
 c64:	5b c0       	rjmp	.+182    	; 0xd1c <DIO_enumGetPinValue+0x118>
 c66:	4e 81       	ldd	r20, Y+6	; 0x06
 c68:	5f 81       	ldd	r21, Y+7	; 0x07
 c6a:	42 30       	cpi	r20, 0x02	; 2
 c6c:	51 05       	cpc	r21, r1
 c6e:	79 f1       	breq	.+94     	; 0xcce <DIO_enumGetPinValue+0xca>
 c70:	8e 81       	ldd	r24, Y+6	; 0x06
 c72:	9f 81       	ldd	r25, Y+7	; 0x07
 c74:	83 30       	cpi	r24, 0x03	; 3
 c76:	91 05       	cpc	r25, r1
 c78:	09 f4       	brne	.+2      	; 0xc7c <DIO_enumGetPinValue+0x78>
 c7a:	3d c0       	rjmp	.+122    	; 0xcf6 <DIO_enumGetPinValue+0xf2>
 c7c:	4f c0       	rjmp	.+158    	; 0xd1c <DIO_enumGetPinValue+0x118>
			{
				case DIO_PORTA:
					*Copy_pu8Value=READ_BIT(PINA,Copy_u8PinID);
 c7e:	e9 e3       	ldi	r30, 0x39	; 57
 c80:	f0 e0       	ldi	r31, 0x00	; 0
 c82:	80 81       	ld	r24, Z
 c84:	28 2f       	mov	r18, r24
 c86:	30 e0       	ldi	r19, 0x00	; 0
 c88:	8b 81       	ldd	r24, Y+3	; 0x03
 c8a:	88 2f       	mov	r24, r24
 c8c:	90 e0       	ldi	r25, 0x00	; 0
 c8e:	a9 01       	movw	r20, r18
 c90:	02 c0       	rjmp	.+4      	; 0xc96 <DIO_enumGetPinValue+0x92>
 c92:	55 95       	asr	r21
 c94:	47 95       	ror	r20
 c96:	8a 95       	dec	r24
 c98:	e2 f7       	brpl	.-8      	; 0xc92 <DIO_enumGetPinValue+0x8e>
 c9a:	ca 01       	movw	r24, r20
 c9c:	81 70       	andi	r24, 0x01	; 1
 c9e:	ec 81       	ldd	r30, Y+4	; 0x04
 ca0:	fd 81       	ldd	r31, Y+5	; 0x05
 ca2:	80 83       	st	Z, r24
 ca4:	3b c0       	rjmp	.+118    	; 0xd1c <DIO_enumGetPinValue+0x118>
					break;
				case DIO_PORTB:
					*Copy_pu8Value=READ_BIT(PINB,Copy_u8PinID);
 ca6:	e6 e3       	ldi	r30, 0x36	; 54
 ca8:	f0 e0       	ldi	r31, 0x00	; 0
 caa:	80 81       	ld	r24, Z
 cac:	28 2f       	mov	r18, r24
 cae:	30 e0       	ldi	r19, 0x00	; 0
 cb0:	8b 81       	ldd	r24, Y+3	; 0x03
 cb2:	88 2f       	mov	r24, r24
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	a9 01       	movw	r20, r18
 cb8:	02 c0       	rjmp	.+4      	; 0xcbe <DIO_enumGetPinValue+0xba>
 cba:	55 95       	asr	r21
 cbc:	47 95       	ror	r20
 cbe:	8a 95       	dec	r24
 cc0:	e2 f7       	brpl	.-8      	; 0xcba <DIO_enumGetPinValue+0xb6>
 cc2:	ca 01       	movw	r24, r20
 cc4:	81 70       	andi	r24, 0x01	; 1
 cc6:	ec 81       	ldd	r30, Y+4	; 0x04
 cc8:	fd 81       	ldd	r31, Y+5	; 0x05
 cca:	80 83       	st	Z, r24
 ccc:	27 c0       	rjmp	.+78     	; 0xd1c <DIO_enumGetPinValue+0x118>
					break;
				case DIO_PORTC:
					*Copy_pu8Value=READ_BIT(PINC,Copy_u8PinID);
 cce:	e3 e3       	ldi	r30, 0x33	; 51
 cd0:	f0 e0       	ldi	r31, 0x00	; 0
 cd2:	80 81       	ld	r24, Z
 cd4:	28 2f       	mov	r18, r24
 cd6:	30 e0       	ldi	r19, 0x00	; 0
 cd8:	8b 81       	ldd	r24, Y+3	; 0x03
 cda:	88 2f       	mov	r24, r24
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	a9 01       	movw	r20, r18
 ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_enumGetPinValue+0xe2>
 ce2:	55 95       	asr	r21
 ce4:	47 95       	ror	r20
 ce6:	8a 95       	dec	r24
 ce8:	e2 f7       	brpl	.-8      	; 0xce2 <DIO_enumGetPinValue+0xde>
 cea:	ca 01       	movw	r24, r20
 cec:	81 70       	andi	r24, 0x01	; 1
 cee:	ec 81       	ldd	r30, Y+4	; 0x04
 cf0:	fd 81       	ldd	r31, Y+5	; 0x05
 cf2:	80 83       	st	Z, r24
 cf4:	13 c0       	rjmp	.+38     	; 0xd1c <DIO_enumGetPinValue+0x118>
					break;
				case DIO_PORTD:
					*Copy_pu8Value=READ_BIT(PIND,Copy_u8PinID);
 cf6:	e0 e3       	ldi	r30, 0x30	; 48
 cf8:	f0 e0       	ldi	r31, 0x00	; 0
 cfa:	80 81       	ld	r24, Z
 cfc:	28 2f       	mov	r18, r24
 cfe:	30 e0       	ldi	r19, 0x00	; 0
 d00:	8b 81       	ldd	r24, Y+3	; 0x03
 d02:	88 2f       	mov	r24, r24
 d04:	90 e0       	ldi	r25, 0x00	; 0
 d06:	a9 01       	movw	r20, r18
 d08:	02 c0       	rjmp	.+4      	; 0xd0e <DIO_enumGetPinValue+0x10a>
 d0a:	55 95       	asr	r21
 d0c:	47 95       	ror	r20
 d0e:	8a 95       	dec	r24
 d10:	e2 f7       	brpl	.-8      	; 0xd0a <DIO_enumGetPinValue+0x106>
 d12:	ca 01       	movw	r24, r20
 d14:	81 70       	andi	r24, 0x01	; 1
 d16:	ec 81       	ldd	r30, Y+4	; 0x04
 d18:	fd 81       	ldd	r31, Y+5	; 0x05
 d1a:	80 83       	st	Z, r24
					break;
			}
			Local_enumErrorState=ES_OK;
 d1c:	81 e0       	ldi	r24, 0x01	; 1
 d1e:	89 83       	std	Y+1, r24	; 0x01
 d20:	05 c0       	rjmp	.+10     	; 0xd2c <DIO_enumGetPinValue+0x128>
		}
		else
		{
			Local_enumErrorState=ES_NULL_POINTER;
 d22:	82 e0       	ldi	r24, 0x02	; 2
 d24:	89 83       	std	Y+1, r24	; 0x01
 d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_enumGetPinValue+0x128>
		}
	}
	else
	{
		Local_enumErrorState=ES_OUT_OF_RANGE;
 d28:	83 e0       	ldi	r24, 0x03	; 3
 d2a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
 d2c:	89 81       	ldd	r24, Y+1	; 0x01
}
 d2e:	27 96       	adiw	r28, 0x07	; 7
 d30:	0f b6       	in	r0, 0x3f	; 63
 d32:	f8 94       	cli
 d34:	de bf       	out	0x3e, r29	; 62
 d36:	0f be       	out	0x3f, r0	; 63
 d38:	cd bf       	out	0x3d, r28	; 61
 d3a:	cf 91       	pop	r28
 d3c:	df 91       	pop	r29
 d3e:	08 95       	ret

00000d40 <SW_enumSwitchsInit>:
#include "../include/LIB/BITMATH.h"
#include "../include/MCAL/DIO/DIO_int.h"
#include "../include/HAL/SWITCH/SW_config.h"

ES_T SW_enumSwitchsInit(SW_T* Copy_pstrSwitchs)
{
 d40:	df 93       	push	r29
 d42:	cf 93       	push	r28
 d44:	00 d0       	rcall	.+0      	; 0xd46 <SW_enumSwitchsInit+0x6>
 d46:	00 d0       	rcall	.+0      	; 0xd48 <SW_enumSwitchsInit+0x8>
 d48:	cd b7       	in	r28, 0x3d	; 61
 d4a:	de b7       	in	r29, 0x3e	; 62
 d4c:	9c 83       	std	Y+4, r25	; 0x04
 d4e:	8b 83       	std	Y+3, r24	; 0x03
	ES_T Local_enumErrorState=ES_NOK;
 d50:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter=0;
 d52:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pstrSwitchs!=NULL)
 d54:	8b 81       	ldd	r24, Y+3	; 0x03
 d56:	9c 81       	ldd	r25, Y+4	; 0x04
 d58:	00 97       	sbiw	r24, 0x00	; 0
 d5a:	09 f4       	brne	.+2      	; 0xd5e <SW_enumSwitchsInit+0x1e>
 d5c:	5d c0       	rjmp	.+186    	; 0xe18 <SW_enumSwitchsInit+0xd8>
	{
		for (Local_u8Counter=0;Local_u8Counter<SW_NUM;Local_u8Counter++)
 d5e:	19 82       	std	Y+1, r1	; 0x01
 d60:	55 c0       	rjmp	.+170    	; 0xe0c <SW_enumSwitchsInit+0xcc>
		{
			Local_enumErrorState=DIO_enumSetPinDirection(Copy_pstrSwitchs[Local_u8Counter].SW_PortID,Copy_pstrSwitchs[Local_u8Counter].SW_PinID,INPUT);
 d62:	89 81       	ldd	r24, Y+1	; 0x01
 d64:	28 2f       	mov	r18, r24
 d66:	30 e0       	ldi	r19, 0x00	; 0
 d68:	c9 01       	movw	r24, r18
 d6a:	88 0f       	add	r24, r24
 d6c:	99 1f       	adc	r25, r25
 d6e:	28 0f       	add	r18, r24
 d70:	39 1f       	adc	r19, r25
 d72:	8b 81       	ldd	r24, Y+3	; 0x03
 d74:	9c 81       	ldd	r25, Y+4	; 0x04
 d76:	fc 01       	movw	r30, r24
 d78:	e2 0f       	add	r30, r18
 d7a:	f3 1f       	adc	r31, r19
 d7c:	40 81       	ld	r20, Z
 d7e:	89 81       	ldd	r24, Y+1	; 0x01
 d80:	28 2f       	mov	r18, r24
 d82:	30 e0       	ldi	r19, 0x00	; 0
 d84:	c9 01       	movw	r24, r18
 d86:	88 0f       	add	r24, r24
 d88:	99 1f       	adc	r25, r25
 d8a:	28 0f       	add	r18, r24
 d8c:	39 1f       	adc	r19, r25
 d8e:	8b 81       	ldd	r24, Y+3	; 0x03
 d90:	9c 81       	ldd	r25, Y+4	; 0x04
 d92:	fc 01       	movw	r30, r24
 d94:	e2 0f       	add	r30, r18
 d96:	f3 1f       	adc	r31, r19
 d98:	91 81       	ldd	r25, Z+1	; 0x01
 d9a:	84 2f       	mov	r24, r20
 d9c:	69 2f       	mov	r22, r25
 d9e:	40 e0       	ldi	r20, 0x00	; 0
 da0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enumSetPinDirection>
 da4:	8a 83       	std	Y+2, r24	; 0x02
			Local_enumErrorState=DIO_enumSetPinValue(Copy_pstrSwitchs[Local_u8Counter].SW_PortID,Copy_pstrSwitchs[Local_u8Counter].SW_PinID,Copy_pstrSwitchs[Local_u8Counter].SW_State);
 da6:	89 81       	ldd	r24, Y+1	; 0x01
 da8:	28 2f       	mov	r18, r24
 daa:	30 e0       	ldi	r19, 0x00	; 0
 dac:	c9 01       	movw	r24, r18
 dae:	88 0f       	add	r24, r24
 db0:	99 1f       	adc	r25, r25
 db2:	28 0f       	add	r18, r24
 db4:	39 1f       	adc	r19, r25
 db6:	8b 81       	ldd	r24, Y+3	; 0x03
 db8:	9c 81       	ldd	r25, Y+4	; 0x04
 dba:	fc 01       	movw	r30, r24
 dbc:	e2 0f       	add	r30, r18
 dbe:	f3 1f       	adc	r31, r19
 dc0:	50 81       	ld	r21, Z
 dc2:	89 81       	ldd	r24, Y+1	; 0x01
 dc4:	28 2f       	mov	r18, r24
 dc6:	30 e0       	ldi	r19, 0x00	; 0
 dc8:	c9 01       	movw	r24, r18
 dca:	88 0f       	add	r24, r24
 dcc:	99 1f       	adc	r25, r25
 dce:	28 0f       	add	r18, r24
 dd0:	39 1f       	adc	r19, r25
 dd2:	8b 81       	ldd	r24, Y+3	; 0x03
 dd4:	9c 81       	ldd	r25, Y+4	; 0x04
 dd6:	fc 01       	movw	r30, r24
 dd8:	e2 0f       	add	r30, r18
 dda:	f3 1f       	adc	r31, r19
 ddc:	41 81       	ldd	r20, Z+1	; 0x01
 dde:	89 81       	ldd	r24, Y+1	; 0x01
 de0:	28 2f       	mov	r18, r24
 de2:	30 e0       	ldi	r19, 0x00	; 0
 de4:	c9 01       	movw	r24, r18
 de6:	88 0f       	add	r24, r24
 de8:	99 1f       	adc	r25, r25
 dea:	28 0f       	add	r18, r24
 dec:	39 1f       	adc	r19, r25
 dee:	8b 81       	ldd	r24, Y+3	; 0x03
 df0:	9c 81       	ldd	r25, Y+4	; 0x04
 df2:	fc 01       	movw	r30, r24
 df4:	e2 0f       	add	r30, r18
 df6:	f3 1f       	adc	r31, r19
 df8:	92 81       	ldd	r25, Z+2	; 0x02
 dfa:	85 2f       	mov	r24, r21
 dfc:	64 2f       	mov	r22, r20
 dfe:	49 2f       	mov	r20, r25
 e00:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <DIO_enumSetPinValue>
 e04:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enumErrorState=ES_NOK;
	u8 Local_u8Counter=0;

	if (Copy_pstrSwitchs!=NULL)
	{
		for (Local_u8Counter=0;Local_u8Counter<SW_NUM;Local_u8Counter++)
 e06:	89 81       	ldd	r24, Y+1	; 0x01
 e08:	8f 5f       	subi	r24, 0xFF	; 255
 e0a:	89 83       	std	Y+1, r24	; 0x01
 e0c:	89 81       	ldd	r24, Y+1	; 0x01
 e0e:	83 30       	cpi	r24, 0x03	; 3
 e10:	08 f4       	brcc	.+2      	; 0xe14 <SW_enumSwitchsInit+0xd4>
 e12:	a7 cf       	rjmp	.-178    	; 0xd62 <SW_enumSwitchsInit+0x22>
		{
			Local_enumErrorState=DIO_enumSetPinDirection(Copy_pstrSwitchs[Local_u8Counter].SW_PortID,Copy_pstrSwitchs[Local_u8Counter].SW_PinID,INPUT);
			Local_enumErrorState=DIO_enumSetPinValue(Copy_pstrSwitchs[Local_u8Counter].SW_PortID,Copy_pstrSwitchs[Local_u8Counter].SW_PinID,Copy_pstrSwitchs[Local_u8Counter].SW_State);
		}
		Local_enumErrorState=ES_NOK;
 e14:	1a 82       	std	Y+2, r1	; 0x02
 e16:	02 c0       	rjmp	.+4      	; 0xe1c <SW_enumSwitchsInit+0xdc>
	}
	else
	{
		Local_enumErrorState=ES_NULL_POINTER;
 e18:	82 e0       	ldi	r24, 0x02	; 2
 e1a:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enumErrorState;
 e1c:	8a 81       	ldd	r24, Y+2	; 0x02
}
 e1e:	0f 90       	pop	r0
 e20:	0f 90       	pop	r0
 e22:	0f 90       	pop	r0
 e24:	0f 90       	pop	r0
 e26:	cf 91       	pop	r28
 e28:	df 91       	pop	r29
 e2a:	08 95       	ret

00000e2c <SW_enumSwitchGetState>:
ES_T SW_enumSwitchGetState(SW_T* Copy_pstrSwitch,u8* Copy_pu8SWState)
{
 e2c:	df 93       	push	r29
 e2e:	cf 93       	push	r28
 e30:	00 d0       	rcall	.+0      	; 0xe32 <SW_enumSwitchGetState+0x6>
 e32:	00 d0       	rcall	.+0      	; 0xe34 <SW_enumSwitchGetState+0x8>
 e34:	0f 92       	push	r0
 e36:	cd b7       	in	r28, 0x3d	; 61
 e38:	de b7       	in	r29, 0x3e	; 62
 e3a:	9b 83       	std	Y+3, r25	; 0x03
 e3c:	8a 83       	std	Y+2, r24	; 0x02
 e3e:	7d 83       	std	Y+5, r23	; 0x05
 e40:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enumErrorState=ES_NOK;
 e42:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pstrSwitch!=NULL&&Copy_pu8SWState!=NULL)
 e44:	8a 81       	ldd	r24, Y+2	; 0x02
 e46:	9b 81       	ldd	r25, Y+3	; 0x03
 e48:	00 97       	sbiw	r24, 0x00	; 0
 e4a:	91 f0       	breq	.+36     	; 0xe70 <SW_enumSwitchGetState+0x44>
 e4c:	8c 81       	ldd	r24, Y+4	; 0x04
 e4e:	9d 81       	ldd	r25, Y+5	; 0x05
 e50:	00 97       	sbiw	r24, 0x00	; 0
 e52:	71 f0       	breq	.+28     	; 0xe70 <SW_enumSwitchGetState+0x44>
	{
		Local_enumErrorState=DIO_enumGetPinValue(Copy_pstrSwitch->SW_PortID,Copy_pstrSwitch->SW_PinID,Copy_pu8SWState);
 e54:	ea 81       	ldd	r30, Y+2	; 0x02
 e56:	fb 81       	ldd	r31, Y+3	; 0x03
 e58:	80 81       	ld	r24, Z
 e5a:	ea 81       	ldd	r30, Y+2	; 0x02
 e5c:	fb 81       	ldd	r31, Y+3	; 0x03
 e5e:	91 81       	ldd	r25, Z+1	; 0x01
 e60:	2c 81       	ldd	r18, Y+4	; 0x04
 e62:	3d 81       	ldd	r19, Y+5	; 0x05
 e64:	69 2f       	mov	r22, r25
 e66:	a9 01       	movw	r20, r18
 e68:	0e 94 02 06 	call	0xc04	; 0xc04 <DIO_enumGetPinValue>
 e6c:	89 83       	std	Y+1, r24	; 0x01
 e6e:	02 c0       	rjmp	.+4      	; 0xe74 <SW_enumSwitchGetState+0x48>
	}
	else
	{
		Local_enumErrorState=ES_NULL_POINTER;
 e70:	82 e0       	ldi	r24, 0x02	; 2
 e72:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enumErrorState;
 e74:	89 81       	ldd	r24, Y+1	; 0x01
}
 e76:	0f 90       	pop	r0
 e78:	0f 90       	pop	r0
 e7a:	0f 90       	pop	r0
 e7c:	0f 90       	pop	r0
 e7e:	0f 90       	pop	r0
 e80:	cf 91       	pop	r28
 e82:	df 91       	pop	r29
 e84:	08 95       	ret

00000e86 <main>:
#include "../include/HAL/SWITCH/SW_config.h"
#include "../include/HAL/SWITCH/SW_int.h"

extern SW_T SWITCH_AstrSwitchs[SW_NUM];
int main (void)
{
 e86:	df 93       	push	r29
 e88:	cf 93       	push	r28
 e8a:	00 d0       	rcall	.+0      	; 0xe8c <main+0x6>
 e8c:	0f 92       	push	r0
 e8e:	cd b7       	in	r28, 0x3d	; 61
 e90:	de b7       	in	r29, 0x3e	; 62
	DIO_enumPortInit();
 e92:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enumPortInit>
	SW_enumSwitchsInit(SWITCH_AstrSwitchs);
 e96:	80 e6       	ldi	r24, 0x60	; 96
 e98:	90 e0       	ldi	r25, 0x00	; 0
 e9a:	0e 94 a0 06 	call	0xd40	; 0xd40 <SW_enumSwitchsInit>

	u8 Local_u8SW1State=0,Local_u8SW2State=0,Local_u8SW3State=0;
 e9e:	19 82       	std	Y+1, r1	; 0x01
 ea0:	1a 82       	std	Y+2, r1	; 0x02
 ea2:	1b 82       	std	Y+3, r1	; 0x03
	while(1)
	{
		SW_enumSwitchGetState(&SWITCH_AstrSwitchs[0],&Local_u8SW1State);
 ea4:	80 e6       	ldi	r24, 0x60	; 96
 ea6:	90 e0       	ldi	r25, 0x00	; 0
 ea8:	9e 01       	movw	r18, r28
 eaa:	2f 5f       	subi	r18, 0xFF	; 255
 eac:	3f 4f       	sbci	r19, 0xFF	; 255
 eae:	b9 01       	movw	r22, r18
 eb0:	0e 94 16 07 	call	0xe2c	; 0xe2c <SW_enumSwitchGetState>
		SW_enumSwitchGetState(&SWITCH_AstrSwitchs[1],&Local_u8SW2State);
 eb4:	83 e6       	ldi	r24, 0x63	; 99
 eb6:	90 e0       	ldi	r25, 0x00	; 0
 eb8:	9e 01       	movw	r18, r28
 eba:	2e 5f       	subi	r18, 0xFE	; 254
 ebc:	3f 4f       	sbci	r19, 0xFF	; 255
 ebe:	b9 01       	movw	r22, r18
 ec0:	0e 94 16 07 	call	0xe2c	; 0xe2c <SW_enumSwitchGetState>
		SW_enumSwitchGetState(&SWITCH_AstrSwitchs[2],&Local_u8SW3State);
 ec4:	86 e6       	ldi	r24, 0x66	; 102
 ec6:	90 e0       	ldi	r25, 0x00	; 0
 ec8:	9e 01       	movw	r18, r28
 eca:	2d 5f       	subi	r18, 0xFD	; 253
 ecc:	3f 4f       	sbci	r19, 0xFF	; 255
 ece:	b9 01       	movw	r22, r18
 ed0:	0e 94 16 07 	call	0xe2c	; 0xe2c <SW_enumSwitchGetState>

		if (Local_u8SW1State==0&&Local_u8SW2State==0&&Local_u8SW3State==0)
 ed4:	89 81       	ldd	r24, Y+1	; 0x01
 ed6:	88 23       	and	r24, r24
 ed8:	61 f4       	brne	.+24     	; 0xef2 <main+0x6c>
 eda:	8a 81       	ldd	r24, Y+2	; 0x02
 edc:	88 23       	and	r24, r24
 ede:	49 f4       	brne	.+18     	; 0xef2 <main+0x6c>
 ee0:	8b 81       	ldd	r24, Y+3	; 0x03
 ee2:	88 23       	and	r24, r24
 ee4:	31 f4       	brne	.+12     	; 0xef2 <main+0x6c>
		{
			DIO_enumSetPinValue(DIO_PORTC,DIO_PIN0,HIGH);
 ee6:	82 e0       	ldi	r24, 0x02	; 2
 ee8:	60 e0       	ldi	r22, 0x00	; 0
 eea:	41 e0       	ldi	r20, 0x01	; 1
 eec:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <DIO_enumSetPinValue>
 ef0:	d9 cf       	rjmp	.-78     	; 0xea4 <main+0x1e>
		}
		else
		{
			DIO_enumSetPinValue(DIO_PORTC,DIO_PIN0,LOW);
 ef2:	82 e0       	ldi	r24, 0x02	; 2
 ef4:	60 e0       	ldi	r22, 0x00	; 0
 ef6:	40 e0       	ldi	r20, 0x00	; 0
 ef8:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <DIO_enumSetPinValue>
 efc:	d3 cf       	rjmp	.-90     	; 0xea4 <main+0x1e>

00000efe <_exit>:
 efe:	f8 94       	cli

00000f00 <__stop_program>:
 f00:	ff cf       	rjmp	.-2      	; 0xf00 <__stop_program>
